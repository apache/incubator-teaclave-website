"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[3290],{3455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"teaclave-faas-legacy/cli/README","title":"Teaclave Command Line Tool","description":"The Teaclave command line tool (teaclave_cli) provides utilities to","source":"@site/docs/teaclave-faas-legacy/cli/README.md","sourceDirName":"teaclave-faas-legacy/cli","slug":"/docs/codebase/cli","permalink":"/docs/codebase/cli","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/cli","slug":"/docs/codebase/cli"},"sidebar":"teaclave-faas-legacy_sidebar","previous":{"title":"Client SDK","permalink":"/docs/codebase/sdk"},"next":{"title":"Common Libraries","permalink":"/docs/codebase/common"}}');var c=t(4848),i=t(8453);const s={permalink:"/docs/codebase/cli",slug:"/docs/codebase/cli"},r="Teaclave Command Line Tool",l={},o=[{value:"Encrypt/Decrypt",id:"encryptdecrypt",level:2},{value:"Verify",id:"verify",level:2},{value:"Attest",id:"attest",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"teaclave-command-line-tool",children:"Teaclave Command Line Tool"})}),"\n",(0,c.jsxs)(n.p,{children:["The Teaclave command line tool (",(0,c.jsx)(n.code,{children:"teaclave_cli"}),") provides utilities to\ninteractive with the platform. The command line tool has several sub-commands:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"encrypt"}),"/",(0,c.jsx)(n.code,{children:"decrypt"}),": These two subcommands are to encrypt/decrypt data used on\nthe platform. Supported algorithms include AES-GCM (128bit and 256 bit), and\nTeaclave File (128bit)."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"verify"}),": Verify the signatures of the enclave info (which contains ",(0,c.jsx)(n.code,{children:"MRSIGNER"}),"\nand ",(0,c.jsx)(n.code,{children:"MRENCLAVE"}),") signed by auditors with their public keys. The enclave info\nis used for remote attestation, Please verify it before connecting the\nplatform with the client SDK."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"attest"}),": Establish an attested TLS with one of the Teaclave services and get\nan attestation report, validate it with attestation service's cert and display\nthe report details."]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"encryptdecrypt",children:"Encrypt/Decrypt"}),"\n",(0,c.jsx)(n.p,{children:"Here are two examples to encrypt and decrypt files with the CLI."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"$ ./teaclave_cli encrypt \\\n    --algorithm teaclave-file-128 \\\n    --key 00000000000000000000000000FF1234 \\\n    --input-file ${FILE} \\\n    --output-file ${ENCRYPTED_FILE} \\\n    --print-cmac\ncfba09e4c2bc72ea9e5392d779c2926c\n\n$ ./teaclave_cli decrypt \\\n    --algorithm teaclave-file-128 \\\n    --key 00000000000000000000000000FF1234 \\\n    --input-file ${ENCRYPTED_FILE} \\\n    --output-file ${DECRYPTED_FILE}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"verify",children:"Verify"}),"\n",(0,c.jsx)(n.p,{children:"Here is an example to verify auditors' signatures of the enclave info file."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'$ ./teaclave_cli verify \\\n    --enclave-info ../examples/enclave_info.toml \\\n    --public-keys $(find ../examples -name "*.public.pem") \\\n    --signatures $(find ../examples -name "*.sign.sha256")\nVerify successfully.\n'})}),"\n",(0,c.jsx)(n.h2,{id:"attest",children:"Attest"}),"\n",(0,c.jsx)(n.p,{children:"Here is an example to display the attestation report from a Teaclave service."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"$ ./teaclave_cli attest --address accvm-dev:7776 --as-ca-cert ../../keys/ias_root_ca_cert.pem\nReport Freshness: 1854s\nSGX Quote status: SwHardeningNeeded\nVersion and signature/key type: Version 2, EPID Linkable signature\nGID or reserved: 3014\nSecurity version of the QE: 11\nSecurity version of the PCE: 10\nID of the QE vendor: 00000000-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nCustom user-defined data (hex): 75b6024c00000000000000000000000000000000\nCPU version (hex): 0f0f0305ff8006000000000000000000\nSSA Frame extended feature set: 0\nAttributes of the enclave (hex): 07000000000000000700000000000000\nEnclave measurement (hex): eadeb5537962d2451a8619fb6a4b10b72f56479e0b7db0bb9c3f5edc143ca6eb\nHash of the enclave singing key (hex): 83d719e77deaca1470f6baf62a4d774303c899db69020f9c70ee1dfc08c7ce9e\nEnclave product ID: 0\nSecurity version of the enclave: 0\nThe value of REPORT (hex): 317cb5c0d9a26747a08833e51bac8ca2ce814aa362c8cd0e2672fdcb6bfee77b9ba32ed7d605778aa52b9f2d2ce698f83ec49e6beecb89c684d861bb078d7dc2\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const c={},i=a.createContext(c);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);