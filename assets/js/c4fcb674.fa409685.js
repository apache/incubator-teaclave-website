"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[2966],{1184:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(4041);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},6482:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"teaclave/docs/mutual-attestation","title":"Mutual Attestation: Why and How","description":"The standard procedure to establish a secure and trusted communication channel","source":"@site/docs/teaclave/docs/mutual-attestation.md","sourceDirName":"teaclave/docs","slug":"/docs/mutual-attestation","permalink":"/docs/mutual-attestation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/mutual-attestation","slug":"/docs/mutual-attestation"},"sidebar":"teaclave_sidebar","previous":{"title":"Build System","permalink":"/docs/build-system"},"next":{"title":"Threat Model","permalink":"/docs/threat-model"}}');var i=a(1085),s=a(1184);const o={permalink:"/docs/mutual-attestation",slug:"/docs/mutual-attestation"},r="Mutual Attestation: Why and How",c={},l=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"In the Repository",id:"in-the-repository",level:2}];function d(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"mutual-attestation-why-and-how",children:"Mutual Attestation: Why and How"})}),"\n",(0,i.jsxs)(t.p,{children:["The standard procedure to establish a secure and trusted communication channel\nfrom a client to an enclave is through remote attestation. However, when the\nclient itself is also an enclave and ",(0,i.jsx)(t.em,{children:"mutual"})," trust between two enclaves is\nrequired, we need additional design and implementation effort. The Teaclave\nplatform consists of multiple enclave services and most of the\nenclave-to-enclave RPC communications need bidirectional authentication. This\ndocument entails the methodology and process of Teaclave's mutual enclave remote\nattestation."]}),"\n",(0,i.jsx)(t.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(t.p,{children:"The identity of an enclave is defined through a pair of cryptographically secure\nhash values, i.e., MRSIGNER and MRENCLAVE. MRSIGNER indicates the builder of the\nenclave, thus shared by enclaves signed by the same party. MRENCLAVE is unique\nto each individual enclave. Teaclave assumes that users do not trust the\nsoftware builder, so verifying MRSIGNER is not enough. For each enclave service\nin Teaclave, it must strictly check the unique identity of the other enclaves it\ncommunicates to through MRENCLAVE."}),"\n",(0,i.jsx)(t.p,{children:"Since the SGX enclave trusts no outside input, the MRENCLAVE should be\nhard-coded into source files used for identity verification logic. Therefore,\nchanging the MRENCLAVE value an enclave tries to match against will change the\nMRENCLAVE of the enclave itself. When two enclaves want to remotely attest each\nother, it is impossible to decide which enclave is to be built first."}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(t.p,{children:["Teaclave resolves this problem by relying on third-party auditors. We assume\nthat there will be several parties trusted by all participants of Teaclave's\ncomputation tasks (cloud platforms, data providers, and customers, etc). The\nsource code and binaries of Teaclave are audited by these trusted parties. Once\nthe auditors decided that Teaclave is secure, they sign and publish the\nidentities of audited enclaves. The ",(0,i.jsx)(t.em,{children:"public keys"})," of the auditors are\nhard-coded in Teaclave enclave source via build time configuration, while the\nenclave measures and their signatures are loaded from outside at runtime. Each\nenclave will verify that the enclave measures are indeed signed by the auditors\nbefore serving any requests."]}),"\n",(0,i.jsx)(t.h2,{id:"in-the-repository",children:"In the Repository"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://github.com/apache/incubator-teaclave/tree/master/config/keys",children:"keys"}),"\ndirectory in the source tree contain the key pairs of three fake auditing\nparties for PoC purposes. Private keys are also included to deliver a smooth\nbuild and test process. In production, builders of Teaclave should obtain the\npublic keys, enclave identities, and the signatures directly from the auditors."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);