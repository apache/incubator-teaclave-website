"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[1608],{8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>d});var t=n(6540);const r={},o=t.createContext(r);function i(e){const s=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:s},e.children)}},8723:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"teaclave-sgx-sdk/documents/environment-setup","title":"Recommended OS to start with","description":"We recommend Ubuntu 16.04/18.04. Desktop or server is the same. It could be your host OS or guest OS (inside docker). Technically, a full compatible list could be found at Intel\'s download page. As of 04-01-2019 (v 2.4.0), the list contains:","source":"@site/docs/teaclave-sgx-sdk/documents/environment-setup.md","sourceDirName":"teaclave-sgx-sdk/documents","slug":"/sgx-sdk-docs/environment-setup","permalink":"/sgx-sdk-docs/environment-setup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/sgx-sdk-docs/environment-setup","slug":"/sgx-sdk-docs/environment-setup"},"sidebar":"teaclave-sgx-sdk_sidebar","next":{"title":"Rust SGX Applications in Mesalock Linux","permalink":"/sgx-sdk-docs/sgx_in_mesalock_linux"}}');var r=n(4848),o=n(8453);const i={permalink:"/sgx-sdk-docs/environment-setup",slug:"/sgx-sdk-docs/environment-setup"},d="Recommended OS to start with",l={},c=[{value:"Rust toolchain",id:"rust-toolchain",level:2},{value:"Intel SGX toolchain setup",id:"intel-sgx-toolchain-setup",level:2},{value:"Docker setup",id:"docker-setup",level:2},{value:"Use docker with hardware support, and run aesm inside docker",id:"use-docker-with-hardware-support-and-run-aesm-inside-docker",level:3},{value:"Use docker without hardware support, only with simulation. Windows/Macbook compatible.",id:"use-docker-without-hardware-support-only-with-simulation-windowsmacbook-compatible",level:2},{value:"Use docker with hardware support, and run aesm outside docker (on the host OS)",id:"use-docker-with-hardware-support-and-run-aesm-outside-docker-on-the-host-os",level:3}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"recommended-os-to-start-with",children:"Recommended OS to start with"})}),"\n",(0,r.jsxs)(s.p,{children:["We recommend Ubuntu 16.04/18.04. Desktop or server is the same. It could be your host OS or guest OS (inside docker). Technically, a full compatible list could be found at Intel's download ",(0,r.jsx)(s.a,{href:"https://download.01.org/intel-sgx/linux-2.4/",children:"page"}),". As of 04-01-2019 (v 2.4.0), the list contains:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"CentOS 7.5"}),"\n",(0,r.jsx)(s.li,{children:"Fedora 27 server"}),"\n",(0,r.jsx)(s.li,{children:"RedHat Enterprise Linux 7.4"}),"\n",(0,r.jsx)(s.li,{children:"SUSE 12.3 server"}),"\n",(0,r.jsx)(s.li,{children:"Ubuntu 16.04"}),"\n",(0,r.jsx)(s.li,{children:"Ubuntu 18.04"}),"\n"]}),"\n",(0,r.jsx)(s.h1,{id:"hardware-setup",children:"Hardware setup"}),"\n",(0,r.jsxs)(s.p,{children:["A good reference for hardware compatibility is ",(0,r.jsx)(s.a,{href:"https://github.com/ayeks/SGX-hardware",children:"SGX-Hardware"}),". You can use the script ",(0,r.jsx)(s.a,{href:"https://github.com/ayeks/SGX-hardware/blob/master/test-sgx.c",children:"test-sgx.c"})," there to check if SGX is/could be enabled."]}),"\n",(0,r.jsx)(s.p,{children:"Followings are FAQs I've been always asked:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Macbook Pro? No to all on hardware support! Docker-based simulation is OK."}),"\n",(0,r.jsx)(s.li,{children:"Rack Server? Here are my listings:"}),"\n"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["SuperServer ",(0,r.jsx)(s.a,{href:"https://www.supermicro.com/products/system/1U/5019/SYS-5019S-MR.cfm",children:"5019S-MR"})]}),"\n",(0,r.jsxs)(s.li,{children:["Lenovo ",(0,r.jsx)(s.a,{href:"https://www.lenovo.com/us/en/data-center/servers/racks/ThinkSystem-SR250/p/77XX7SRSR25",children:"SR250"})]}),"\n",(0,r.jsxs)(s.li,{children:["SuperMicro Microblade server with ",(0,r.jsx)(s.a,{href:"https://www.supermicro.com/products/MicroBlade/module/MBI-6119G-T4.cfm",children:"MBI-6119G-T4"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.ol,{start:"3",children:["\n",(0,r.jsx)(s.li,{children:"Laptops? I don't know. If you can find something related to Intel SGX in the BIOS, then Yes."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Another solution is Intel's ",(0,r.jsx)(s.a,{href:"https://www.intel.com/content/dam/support/us/en/documents/server-products/server-accessories/VCA2_HW_User_Guide.pdf",children:"VCA 2"})," card. It should be placed only in 2-socket Xeon E5 systems (or following). Dmitrii of Intel Lab is using it for ",(0,r.jsx)(s.a,{href:"https://redislabs.com/rlsessions_post_type/redis-sgx-secure-redis-intel-sgx/",children:"Redis-SGX"}),"."]}),"\n",(0,r.jsx)(s.h1,{id:"software-setup",children:"Software Setup"}),"\n",(0,r.jsx)(s.h2,{id:"rust-toolchain",children:"Rust toolchain"}),"\n",(0,r.jsxs)(s.p,{children:["Please use ",(0,r.jsx)(s.a,{href:"https://rustup.rs/",children:"rustup"})," to install and manage Rust toolchains. ",(0,r.jsx)(s.strong,{children:"DO NOT"})," use anything like ",(0,r.jsx)(s.code,{children:"apt"})," or ",(0,r.jsx)(s.code,{children:"yum"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"During the installation you'll be asked about 'installation options' as follows:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Current installation options:\n\n   default host triple: x86_64-unknown-linux-gnu\n     default toolchain: stable\n  modify PATH variable: yes\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The host triple (though quadruple here) is correct. You could just press enter to skip it. When asking about default toolchain, you could enter ",(0,r.jsx)(s.code,{children:"nightly-2019-01-28"})," or similar version number. And we recommend to answer 'Y' to the PATH modification."]}),"\n",(0,r.jsxs)(s.p,{children:["rustup is always installed in ",(0,r.jsx)(s.code,{children:"~"})," and does not affect other users."]}),"\n",(0,r.jsx)(s.p,{children:"Then you will have rustup works well. To switch to another toolchain, try"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ rustup toolchain default nightly-2019-03-31\n"})}),"\n",(0,r.jsx)(s.p,{children:"This would triggers downloading and installation if the desired toolchain is not found on your disk."}),"\n",(0,r.jsxs)(s.p,{children:["To add more rust tools such as ",(0,r.jsx)(s.code,{children:"rust-src"})," (for xargo), ",(0,r.jsx)(s.code,{children:"rust-clippy"})," (for lint):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ rustup component add rust-src\n"})}),"\n",(0,r.jsx)(s.h2,{id:"intel-sgx-toolchain-setup",children:"Intel SGX toolchain setup"}),"\n",(0,r.jsx)(s.p,{children:"The toolchain setup strictly follows the following steps:"}),"\n",(0,r.jsxs)(s.ol,{start:"0",children:["\n",(0,r.jsx)(s.li,{children:"Driver installation ( sgx_linux_x64_driver_??????.bin ). You'll get a misc device '/dev/isgx' after this step."}),"\n",(0,r.jsx)(s.li,{children:"(OPTIONAL, if Intel ME is required) iCls setup (iclsClient-1.45.449.12-1.x86_64.rpm)"}),"\n",(0,r.jsxs)(s.li,{children:["(OPTIONAL, if Intel ME is required) jhi setup ",(0,r.jsx)(s.a,{href:"https://github.com/01org/dynamic-application-loader-host-interface",children:"https://github.com/01org/dynamic-application-loader-host-interface"})]}),"\n",(0,r.jsx)(s.li,{children:"Platform Software installation (libsgx-enclave-common, libsgx-enclave-common-dev, libsgx-enclave-common-dbgsym)"}),"\n",(0,r.jsx)(s.li,{children:"Intel SGX SDK installation ( sgx_linux_x64_sdk_???????.bin )"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["And don't forget to source the ",(0,r.jsx)(s.code,{children:"environment"})," file for Intel SGX SDK (such as sgx-sign)."]}),"\n",(0,r.jsx)(s.h2,{id:"docker-setup",children:"Docker setup"}),"\n",(0,r.jsx)(s.h3,{id:"use-docker-with-hardware-support-and-run-aesm-inside-docker",children:"Use docker with hardware support, and run aesm inside docker"}),"\n",(0,r.jsxs)(s.p,{children:["Firstly, do step 0 to get ",(0,r.jsx)(s.code,{children:"/dev/isgx"})," works. Then start a docker container as follows:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ docker run -ti --rm -v /path/to/sdk:/root/sgx \\\n             --device /dev/isgx \\\n             --device /dev/mei0 \\  # Optional if you have it and want to use it\n             baiduxlab/sgx-rust\nroot@913e6a00c8d8:~#\n"})}),"\n",(0,r.jsxs)(s.p,{children:["(Optional) Install iCls and jhi daemon. Steps are ",(0,r.jsx)(s.a,{href:"https://github.com/apache/incubator-teaclave-sgx-sdk/blob/master/dockerfile/Dockerfile.1604.nightly#L50",children:"here"})]}),"\n",(0,r.jsxs)(s.p,{children:["(Optional) Start jhi daemon: ",(0,r.jsx)(s.code,{children:"jhid -d"})]}),"\n",(0,r.jsx)(s.p,{children:"Start aesm daemon"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"root@913e6a00c8d8:~# aesm_service[18]: The server sock is 0x5636e90be960\naesm_service[18]: [ADMIN]White List update requested\naesm_service[18]: [ADMIN]Platform Services initializing\naesm_service[18]: [ADMIN]Platform Services initialization failed due to DAL error\naesm_service[18]: [ADMIN]White list update request successful for Version: 49\n\nroot@913e6a00c8d8:~#\n"})}),"\n",(0,r.jsxs)(s.p,{children:["And then change directory to ",(0,r.jsx)(s.code,{children:"/root/sgx/samplecode/hello-rust"})," and ",(0,r.jsx)(s.code,{children:"make"}),". Then cd to ",(0,r.jsx)(s.code,{children:"bin"})," and ",(0,r.jsx)(s.code,{children:"./app"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"use-docker-without-hardware-support-only-with-simulation-windowsmacbook-compatible",children:"Use docker without hardware support, only with simulation. Windows/Macbook compatible."}),"\n",(0,r.jsx)(s.p,{children:"Make sure you have docker installed and working."}),"\n",(0,r.jsx)(s.p,{children:"Start docker as:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ docker run -ti --rm -v /path/to/sdk:/root/sgx baiduxlab/sgx-rust\nroot@913e6a00c8d8:~#\n"})}),"\n",(0,r.jsx)(s.p,{children:"And then build in simulation mode"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ cd /root/sgx/samplecode/hello-rust\n$ SGX_MODE=SW make\n$ cd bin\n$ ./app\n"})}),"\n",(0,r.jsx)(s.h3,{id:"use-docker-with-hardware-support-and-run-aesm-outside-docker-on-the-host-os",children:"Use docker with hardware support, and run aesm outside docker (on the host OS)"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://github.com/apache/incubator-teaclave-sgx-sdk/raw/master/documents/mesa.png",alt:"overview"})}),"\n",(0,r.jsxs)(s.p,{children:["Just add another device mapping to the command to have ",(0,r.jsx)(s.code,{children:"aesm.socket"})," works in SGX. This requires step 3 finished on the host OS and ",(0,r.jsx)(s.code,{children:"/var/run/aesmd/aesm.socket"})," exists on the host OS."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"$ docker run --rm -ti \\\n             --device /dev/isgx \\                               # forward isgx device\n             -v /path/to/rust-sgx-sdk:/root/sgx \\               # add SDK\n             -v /var/run/aesmd:/var/run/aesmd \\                 # forward domain socket\n             baiduxlab/sgx-rust\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Then you can skip launching ",(0,r.jsx)(s.code,{children:"aesmd"})," in the docker container."]}),"\n",(0,r.jsx)(s.h1,{id:"ci-setup",children:"CI setup"}),"\n",(0,r.jsxs)(s.p,{children:["The only known solution:",(0,r.jsx)(s.a,{href:"http://drone.io",children:"drone.io"})," is provided by @elichai. We've set it up successfully."]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);