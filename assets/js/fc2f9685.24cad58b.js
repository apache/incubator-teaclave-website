"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[126],{1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(4041);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}},5295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/emulate-and-dev-in-docker-std","title":"\ud83d\ude80 Developing TAs with Rust Standard Library in Docker","description":"This guide covers the dev-env with std support that enables developing TA using Rust standard library (std),","source":"@site/docs/teaclave-trustzone-sdk/docs/emulate-and-dev-in-docker-std.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md","permalink":"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md","slug":"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Quick Emulation And Development in Docker","permalink":"/trustzone-sdk-docs/emulate-and-dev-in-docker.md"},"next":{"title":"Overview of OP-TEE Rust Examples","permalink":"/trustzone-sdk-docs/overview-of-optee-rust-examples"}}');var i=t(1085),d=t(1184);const r={permalink:"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md",slug:"/trustzone-sdk-docs/emulate-and-dev-in-docker-std.md"},a="\ud83d\ude80 Developing TAs with Rust Standard Library in Docker",o={},l=[{value:"What the Dev-Env with Std Support Provides",id:"what-the-dev-env-with-std-support-provides",level:2},{value:"1. Setting Up the Dev-Env with Std Support",id:"1-setting-up-the-dev-env-with-std-support",level:2},{value:"Pull the Docker Image",id:"pull-the-docker-image",level:3},{value:"One-Time Setup Inside Container",id:"one-time-setup-inside-container",level:3},{value:"2. Configuration Management System",id:"2-configuration-management-system",level:2},{value:"Check Available Configurations",id:"check-available-configurations",level:3},{value:"Switching Between Configurations",id:"switching-between-configurations",level:3},{value:"3. Building and Target Differences",id:"3-building-and-target-differences",level:2},{value:"4. Hello World Example: Std vs No-Std",id:"4-hello-world-example-std-vs-no-std",level:2},{value:"Build with Default Std Configuration",id:"build-with-default-std-configuration",level:3},{value:"Switch to No-Std and Rebuild",id:"switch-to-no-std-and-rebuild",level:3},{value:"5. Emulation and Execution",id:"5-emulation-and-execution",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-developing-tas-with-rust-standard-library-in-docker",children:"\ud83d\ude80 Developing TAs with Rust Standard Library in Docker"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide covers the ",(0,i.jsx)(n.strong,{children:"dev-env with std support"})," that enables ",(0,i.jsx)(n.strong,{children:"developing TA using Rust standard library (std)"}),",\ncompared to the regular no-std environment documented in ",(0,i.jsx)(n.a,{href:"/trustzone-sdk-docs/emulate-and-dev-in-docker.md",children:"emulate-and-dev-in-docker.md"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"dev-env with std support"})," provides a complete setup for building TAs that can use Rust's standard library features like collections, networking, etc."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"Prerequisites"}),": Read the ",(0,i.jsx)(n.a,{href:"/trustzone-sdk-docs/emulate-and-dev-in-docker.md",children:"original Docker development guide"}),"\nfirst. This document focuses only on std-specific differences and capabilities."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-the-dev-env-with-std-support-provides",children:"What the Dev-Env with Std Support Provides"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"dev-env with std support"})," enables ",(0,i.jsx)(n.strong,{children:"developing TA using Rust std"})," by providing:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexible configuration management"})," - Switch between std/no-std modes and architectures dynamically"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rust standard library tailored for OP-TEE"})," - Build TAs using collections, networking, serialization capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mixed development support"})," - Combine different host and TA architectures, including switching between no-std/std in the same project"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-setting-up-the-dev-env-with-std-support",children:"1. Setting Up the Dev-Env with Std Support"}),"\n",(0,i.jsx)(n.h3,{id:"pull-the-docker-image",children:"Pull the Docker Image"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Pull the dev-env with std support for developing TA using Rust std\n$ docker pull teaclave/teaclave-trustzone-emulator-std-optee-4.5.0-expand-memory:latest\n\n# Launch the dev-env container\n$ docker run -it --rm \\\n  --name teaclave_dev_env \\\n  -v $(pwd):/root/teaclave_sdk_src \\\n  -w /root/teaclave_sdk_src \\\n  teaclave/teaclave-trustzone-emulator-std-optee-4.5.0-expand-memory:latest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"one-time-setup-inside-container",children:"One-Time Setup Inside Container"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create symbolic link to make it compatiable with existing SDK examples\n$ ln -s $RUST_STD_DIR rust\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcdd ",(0,i.jsx)(n.strong,{children:"Note"}),": This symlink is required for current SDK examples due to hardcoded std dependency paths in Cargo.toml. Your own projects may organize std files differently."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-configuration-management-system",children:"2. Configuration Management System"}),"\n",(0,i.jsxs)(n.p,{children:["The key difference is the ",(0,i.jsx)(n.strong,{children:"unified configuration system"})," that allows switching between std/no-std modes and different architectures on demand."]}),"\n",(0,i.jsx)(n.h3,{id:"check-available-configurations",children:"Check Available Configurations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Show current active configuration\n$ switch_config --status\n\n# List all supported configurations\n$ switch_config --list\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TA Configurations Available:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"std/aarch64"}),", ",(0,i.jsx)(n.code,{children:"std/arm32"})," - With Rust standard library"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"no-std/aarch64"}),", ",(0,i.jsx)(n.code,{children:"no-std/arm32"})," - Without standard library"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Host Configurations Available:"})," ",(0,i.jsx)(n.code,{children:"aarch64"}),", ",(0,i.jsx)(n.code,{children:"arm32"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Default Configuration:"})," Host=",(0,i.jsx)(n.code,{children:"aarch64"}),", TA=",(0,i.jsx)(n.code,{children:"std/aarch64"})]}),"\n",(0,i.jsx)(n.h3,{id:"switching-between-configurations",children:"Switching Between Configurations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Switch TA configurations\n$ switch_config --ta std/aarch64     # Enable std for 64-bit TA\n$ switch_config --ta std/arm32       # Enable std for 32-bit TA  \n$ switch_config --ta no-std/aarch64  # Disable std, use 64-bit no-std\n\n# Switch host architecture\n$ switch_config --host arm32         # Use 32-bit host\n\n# Mixed development example: 32-bit host + 64-bit std TA\n$ switch_config --host arm32 && switch_config --ta std/aarch64\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3-building-and-target-differences",children:"3. Building and Target Differences"}),"\n",(0,i.jsxs)(n.p,{children:["Follow the ",(0,i.jsx)(n.a,{href:"/trustzone-sdk-docs/emulate-and-dev-in-docker.md#2-build-the-hello-world-example",children:"original building instructions"}),", but note these important target differences:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Configuration"}),(0,i.jsx)(n.th,{children:"TA Target"}),(0,i.jsx)(n.th,{children:"Build Tool"}),(0,i.jsx)(n.th,{children:"Host Target"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"std/*"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"*-unknown-optee"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"xargo"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"*-unknown-linux-gnu"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"no-std/*"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"*-unknown-linux-gnu"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"cargo"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"*-unknown-linux-gnu"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example std build output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TA=ta/target/aarch64-unknown-optee/release/133af0ca-bdab-11eb-9130-43bf7873bf67.ta\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-hello-world-example-std-vs-no-std",children:"4. Hello World Example: Std vs No-Std"}),"\n",(0,i.jsx)(n.h3,{id:"build-with-default-std-configuration",children:"Build with Default Std Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build hello world with std/aarch64 (default configuration)\n$ cd examples/hello_world-rs/\n$ make\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result:"})," TA built with std enabled, targeting ",(0,i.jsx)(n.code,{children:"aarch64-unknown-optee"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TA=ta/target/aarch64-unknown-optee/release/133af0ca-bdab-11eb-9130-43bf7873bf67.ta\n"})}),"\n",(0,i.jsx)(n.h3,{id:"switch-to-no-std-and-rebuild",children:"Switch to No-Std and Rebuild"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Switch TA to no-std mode and rebuild\n$ switch_config --ta no-std/aarch64\n$ make clean && make\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result:"})," TA now targets ",(0,i.jsx)(n.code,{children:"aarch64-unknown-linux-gnu"})," (no-std):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TA=ta/target/aarch64-unknown-linux-gnu/release/133af0ca-bdab-11eb-9130-43bf7873bf67.ta\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-emulation-and-execution",children:"5. Emulation and Execution"}),"\n",(0,i.jsxs)(n.p,{children:["The emulation process is identical to the no-std environment. Follow ",(0,i.jsx)(n.a,{href:"/trustzone-sdk-docs/emulate-and-dev-in-docker.md#3-make-the-artifacts-accessible-to-the-emulator",children:"sections 3-6 of the original guide"})," for complete emulation setup instructions."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);