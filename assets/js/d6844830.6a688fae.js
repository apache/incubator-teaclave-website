"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[5676],{1184:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(4041);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}},2030:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"teaclave-sgx-sdk/documents/debugging-a-local-rust-sgx-enclave-in-docker-with-sgx-gdb","title":"Before start","description":"As of today (03/19/2019), sgx-gdb cannot work well with gdb > 7.12. In this wiki page, I\'m using the gdb 7.11.1. Please check if you have the correct version of gdb.","source":"@site/docs/teaclave-sgx-sdk/documents/debugging-a-local-rust-sgx-enclave-in-docker-with-sgx-gdb.md","sourceDirName":"teaclave-sgx-sdk/documents","slug":"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave","permalink":"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave","slug":"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave"},"sidebar":"teaclave-sgx-sdk_sidebar","previous":{"title":"Developing with Visual Studio Code","permalink":"/sgx-sdk-docs/developing-with-vscode"},"next":{"title":"Public Cloud Rust SGX Development","permalink":"/sgx-sdk-docs/public-cloud-for-rust-sgx-dev"}}');var i=s(1085),a=s(1184);const r={permalink:"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave",slug:"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave"},o="Before start",d={},l=[{value:"Tips",id:"tips",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"before-start",children:"Before start"})}),"\n",(0,i.jsxs)(n.p,{children:["As of today (03/19/2019), ",(0,i.jsx)(n.code,{children:"sgx-gdb"})," cannot work well with gdb > 7.12. In this wiki page, I'm using the gdb 7.11.1. Please check if you have the correct version of gdb."]}),"\n",(0,i.jsx)(n.h1,{id:"requirement",children:"Requirement"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linux"}),"\n",(0,i.jsx)(n.li,{children:"docker installed"}),"\n",(0,i.jsxs)(n.li,{children:["Intel SGX driver installed and ",(0,i.jsx)(n.code,{children:"/dev/isgx"})," works."]}),"\n",(0,i.jsx)(n.li,{children:"docker image baiduxlab/sgx-rust:1604"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"prepare-the-code",children:"Prepare the code"}),"\n",(0,i.jsxs)(n.p,{children:["Let's use ",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-sgx-sdk/tree/master/samplecode/hello-rust",children:"hello-rust"})," as debuggee. We need to add debug info for all of the Rust/C codes."]}),"\n",(0,i.jsxs)(n.p,{children:["First, switch to debug build for the Rust codes. In the root Makefile of hello-rust, remove the ",(0,i.jsx)(n.code,{children:"--release"})," Rust flag and fix the path:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"-App_Rust_Flags := --release\n+App_Rust_Flags :=\n App_SRC_Files := $(shell find app/ -type f -name '*.rs') $(shell find app/ -type f -name 'Cargo.toml')\n App_Include_Paths := -I ./app -I./include -I$(SGX_SDK)/include -I$(CUSTOM_EDL_PATH)\n App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)\n\n-App_Rust_Path := ./app/target/release\n+App_Rust_Path := ./app/target/debug\n App_Enclave_u_Object :=app/libEnclave_u.a\n App_Name := bin/app\n"})}),"\n",(0,i.jsx)(n.p,{children:"And do the same thing in enclave/Makefile:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"-       RUSTC_BOOTSTRAP=1 cargo build --release\n-       cp ./target/release/libhelloworldsampleenclave.a ../lib/libenclave.a\n-endif\n+       RUSTC_BOOTSTRAP=1 cargo build\n+       cp ./target/debug/libhelloworldsampleenclave.a ../lib/libenclave.a\n+endif\n"})}),"\n",(0,i.jsx)(n.p,{children:"And we also need to add debug symbol to for Enclave_t.c and Enclave_u.c. In the root Makefile:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"        SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign\n        SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r\n else\n-       SGX_COMMON_CFLAGS := -m64\n+       SGX_COMMON_CFLAGS := -m64 -ggdb\n        SGX_LIBRARY_PATH := $(SGX_SDK)/lib64\n        SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign\n        SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r\n"})}),"\n",(0,i.jsx)(n.h1,{id:"start-the-docker-container",children:"Start the docker container"}),"\n",(0,i.jsxs)(n.p,{children:["Next, use the following command to start a docker container. Please ",(0,i.jsx)(n.strong,{children:"fix the path"})," before running it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ docker run -ti \\\n             --rm \\\n             --privileged \\\n             -v /home/ding/rust-sgx-sdk:/root/rust-sgx-sdk \\\n             --device /dev/isgx \\\n             baiduxlab/sgx-rust:1604 bash\nroot@ef40bc98b273:~#\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, set up gdb using ",(0,i.jsx)(n.code,{children:"apt-get"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"root@ef40bc98b273:~# apt-get update && apt-get install -y gdb\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then check if the version is correct:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'root@ef40bc98b273:~# gdb --version\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later [http://gnu.org/licenses/gpl.html](http://gnu.org/licenses/gpl.html)\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type "show copying"\nand "show warranty" for details.\nThis GDB was configured as "x86_64-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n[http://www.gnu.org/software/gdb/bugs/](http://www.gnu.org/software/gdb/bugs/).\nFind the GDB manual and other documentation resources online at:\n[http://www.gnu.org/software/gdb/documentation/](http://www.gnu.org/software/gdb/documentation/).\nFor help, type "help".\nType "apropos word" to search for commands related to "word".\n'})}),"\n",(0,i.jsx)(n.p,{children:"As of today (03-19-2019), the installed version is 7.11.1 and it's ok."}),"\n",(0,i.jsx)(n.p,{children:"Then we need to start the aesm service daemon:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"root@ef40bc98b273:~# /opt/intel/libsgx-enclave-common/aesm/aesm_service\naesm_service[878]: The server sock is 0x55ed65a9a560\naesm_service[878]: [ADMIN]White List update requested\naesm_service[878]: [ADMIN]Platform Services initializing\naesm_service[878]: [ADMIN]Platform Services initialization failed due to DAL error\naesm_service[878]: [ADMIN]White list update request successful for Version: 49\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Just ignore the ",(0,i.jsx)(n.code,{children:"DAL error"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"debug-the-enclave",children:"Debug the enclave"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"root@ef40bc98b273:~# cd rust-sgx-sdk/samplecode/hello-rust/\nroot@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust# make\ninfo: syncing channel updates for 'stable-2019-01-17-x86_64-unknown-linux-gnu'\ninfo: latest update on 2019-01-17, rust version 1.32.0 (9fda7c223 2019-01-16)\ninfo: downloading component 'rustc'\n..........(suppressed output)..........\nLINK =>  enclave/enclave.so\n\x3c!-- Please refer to User's Guide for the explanation of each field --\x3e\n<EnclaveConfiguration>\n    <ProdID>0</ProdID>\n    <ISVSVN>0</ISVSVN>\n    <StackMaxSize>0x40000</StackMaxSize>\n    <HeapMaxSize>0x100000</HeapMaxSize>\n    <TCSNum>1</TCSNum>\n    <TCSPolicy>1</TCSPolicy>\n    <DisableDebug>0</DisableDebug>\n    <MiscSelect>0</MiscSelect>\n    <MiscMask>0xFFFFFFFF</MiscMask>\n</EnclaveConfiguration>\ntcs_num 1, tcs_max_num 1, tcs_min_pool 1\nThe required memory is 1798144B.\nSucceed.\nSIGN =>  bin/enclave.signed.so\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's debug it!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'root@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust# cd bin/\nroot@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust/bin# sgx-gdb ./app\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later [http://gnu.org/licenses/gpl.html](http://gnu.org/licenses/gpl.html)\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type "show copying"\nand "show warranty" for details.\nThis GDB was configured as "x86_64-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n[http://www.gnu.org/software/gdb/bugs/](http://www.gnu.org/software/gdb/bugs/).\nFind the GDB manual and other documentation resources online at:\n[http://www.gnu.org/software/gdb/documentation/](http://www.gnu.org/software/gdb/documentation/).\nFor help, type "help".\nType "apropos word" to search for commands related to "word"...\nSource directories searched: /opt/sgxsdk/lib64/gdb-sgx-plugin:$cdir:$cwd\nSetting environment variable "LD_PRELOAD" to null value.\nReading symbols from ./app...done.\nwarning: Missing auto-load script at offset 0 in section .debug_gdb_scripts\nof file /root/rust-sgx-sdk/samplecode/hello-rust/bin/app.\nUse `info auto-load python-scripts [REGEXP]\' to list them.\n(gdb) b say_something\nBreakpoint 1 at 0x11800: file app/Enclave_u.c, line 731.\n(gdb) r\nStarting program: /root/rust-sgx-sdk/samplecode/hello-rust/bin/app\ndetect urts is loaded, initializing\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".\n[+] Home dir is /root\n[-] Open token file /root/enclave.token error! Will create one.\nadd-symbol-file \'/root/rust-sgx-sdk/samplecode/hello-rust/bin/enclave.signed.so\' 0x7ffff5805340 -readnow -s .interp 0x7ffff5800270  -s .note.gnu.build-id 0x7ffff580028c  -s .gnu.hash 0x7ffff58002b0  -s .dynsym 0x7ffff58002e0  -s .dynstr 0x7ffff5800388  -s .gnu.version 0x7ffff58003c2  -s .gnu.version_d 0x7ffff58003d0  -s .rela.dyn 0x7ffff5800408  -s .plt 0x7ffff5805310  -s .plt.got 0x7ffff5805320  -s .nipx 0x7ffff5845060  -s .rodata 0x7ffff58458a0  -s .eh_frame_hdr 0x7ffff584ace0  -s .eh_frame 0x7ffff584d4b0  -s .gcc_except_table 0x7ffff5857850  -s .tbss 0x7ffff5a597a0  -s .init_array 0x7ffff5a597a0  -s .fini_array 0x7ffff5a597a8  -s .data.rel.ro 0x7ffff5a59800  -s .dynamic 0x7ffff5a5b000  -s .got 0x7ffff5a5b190  -s .got.plt 0x7ffff5a5c000  -s .data 0x7ffff5a5c020  -s .nipd 0x7ffff5a5cd84  -s .niprod 0x7ffff5a5cdc0  -s .bss 0x7ffff5a5d600\n[+] Saved updated launch token!\n[+] Init Enclave Successful 2!\n\nBreakpoint 1, say_something (eid=2, retval=0x7fffffffe288,\n    some_string=0x5555557c0f00 "This is a normal world string passed into Enclave!\\n", len=51) at app/Enclave_u.c:731\n731\t{\n(gdb)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Look at the automatically triggered ",(0,i.jsx)(n.code,{children:"add-symbol-file"})," command. ",(0,i.jsx)(n.code,{children:"sgx-gdb"})," helps us load the debug sym automatically. If you can't see this line, it means that ",(0,i.jsx)(n.code,{children:"sgx-gdb"})," is not working."]}),"\n",(0,i.jsx)(n.p,{children:"Let's check where it stopped at:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info reg rip\nrip            0x555555565800\t0x555555565800 <say_something>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It stopped at 0x555555565800, not in the enclave. It the place where ",(0,i.jsx)(n.code,{children:"say_something"})," located in ",(0,i.jsx)(n.code,{children:"Enclave_u.c"}),". But we can set another breakpoint at the one inside enclave:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(gdb) info line say_something\nLine 731 of "app/Enclave_u.c" starts at address 0x555555565800 <say_something>\n   and ends at 0x555555565804 <say_something+4>.\nLine 51 of "src/lib.rs" starts at address 0x7ffff5827ab0 <say_something>\n   and ends at 0x7ffff5827ac1 <say_something+17>.\n(gdb) b "src/lib.rs:say_something"\nNote: breakpoint 1 also set at pc 0x7ffff5827ac1.\nBreakpoint 2 at 0x7ffff5827ac1: file src/lib.rs, line 52.\n'})}),"\n",(0,i.jsx)(n.p,{children:"So now bp #2 is the correct bp inside SGX enclave. Continue:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(gdb) c\nContinuing.\n\nBreakpoint 1, say_something (\n    some_string=0x7ffff5a71040 "This is a normal world string passed into Enclave!\\n", some_len=51) at src/lib.rs:52\n(gdb) info reg rip\nrip            0x7ffff5827ac1\t0x7ffff5827ac1 <say_something+17>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["That's it! It stopped correctly at the first statement in enclave function ",(0,i.jsx)(n.code,{children:"say_something"}),"! We can do something more using gdb:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(gdb) n\n54\t    let str_slice = unsafe { slice::from_raw_parts(some_string, some_len) };\n(gdb)\n55\t    let _ = io::stdout().write(str_slice);\n(gdb)\nThis is a normal world string passed into Enclave!\n58\t    let rust_raw_string = "This is a in-Enclave ";\n(gdb) n\n60\t    let word:[u8;4] = [82, 117, 115, 116];\n(gdb) p rust_raw_string\n$1 = {data_ptr = 0x7ffff5847150 "This is a in-Enclave Invalid UTF-8\\n",\n  length = 21}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["That's it! Try ",(0,i.jsx)(n.code,{children:"p"})," more stuffs!"]}),"\n",(0,i.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/longld/peda",children:"peda"})," is helpful with some commands like ",(0,i.jsx)(n.code,{children:"vmmap"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);