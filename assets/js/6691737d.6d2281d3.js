"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[6062],{8453:(e,n,c)=>{c.d(n,{R:()=>a,x:()=>s});var i=c(6540);const t={},l=i.createContext(t);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},9274:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"teaclave-faas-legacy/docs/executing-in-occlum","title":"Executing builtin-functions in Occlum","description":"The example shows how to run teaclave builtin-functions in Occlum.","source":"@site/docs/teaclave-faas-legacy/docs/executing-in-occlum.md","sourceDirName":"teaclave-faas-legacy/docs","slug":"/docs/executing-in-occlum","permalink":"/docs/executing-in-occlum","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/executing-in-occlum","slug":"/docs/executing-in-occlum"}}');var t=c(4848),l=c(8453);const a={permalink:"/docs/executing-in-occlum",slug:"/docs/executing-in-occlum"},s="Executing builtin-functions in Occlum",o={},r=[{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:2}];function u(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"executing-builtin-functions-in-occlum",children:"Executing builtin-functions in Occlum"})}),"\n",(0,t.jsx)(n.p,{children:"The example shows how to run teaclave builtin-functions in Occlum."}),"\n",(0,t.jsx)(n.h2,{id:"build",children:"Build"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Clone the teaclave project."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git clone https://github.com/apache/incubator-teaclave.git ./teaclave && cd ./teaclave\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Edit ",(0,t.jsx)(n.code,{children:"config/build.config.toml"})," and add the executable binary as accepted inbound service of scheduler. The following is an example that uses teaclave_execution_service_libos as the name of binary."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'scheduler      = ["teaclave_execution_service", "teaclave_execution_service_libos"]\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["NOTE",(0,t.jsx)(n.br,{}),"\nThe same name should be used in ",(0,t.jsx)(n.code,{children:"build.config.toml"})," and ",(0,t.jsx)(n.code,{children:"enclave_info.toml"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Build teaclave project. After building the project, you can find the binary teaclave_execution_service_libos in ",(0,t.jsx)(n.code,{children:"${TEACLAVE_BIN_INSTALL_DIR}"}),". Work at teaclave project source directory."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir build && cd build\ncmake ..\nmake\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["Build occlum instance. ",(0,t.jsx)(n.code,{children:"cmake/scripts/build_occlum_instance.sh"})," is a demo script to build an instance."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["NOTE",(0,t.jsx)(n.br,{}),"\nYou should edit the attestation information and the advertised_address of scheduler in ",(0,t.jsx)(n.code,{children:"runtime.config.toml"})," required by teaclave_execution_service_libos before building the occlum instance."]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Update enclave_info and auditors for Teaclave platform."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sgx_sign dump -enclave ${TEACLAVE_BIN_INSTALL_DIR}/teaclave_instance/build/lib/libocclum-libos.signed.so \\\n    -dumpfile ${TEACLAVE_OUT_DIR}/teaclave_execution_service_libos_enclave.meta.txt\n\ncat ${TEACLAVE_OUT_DIR}/teaclave_execution_service_libos_enclave.meta.txt | \\\npython ${MT_SCRIPT_DIR}/gen_enclave_info_toml.py teaclave_execution_service_libos \\\n    > ${TEACLAVE_OUT_DIR}/teaclave_execution_service_libos_enclave_info.toml\n\ncd ${TEACLAVE_BUILD_ROOT} && make update_sig\n"})}),"\n",(0,t.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,t.jsx)(n.p,{children:"Run teaclave services except teaclave_execution_serice and run teaclave_execution_service_libos on Occlum"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Required by teaclave services\nmkdir -p /tmp/fusiont_data \ncd ${TEACLAVE_SERVICE_INSTALL_DIR} \n\n# Before running services, you should check the information in runtime.config.toml.\n# For DCAP mode, start the teaclave_dcap_ref_as service first.\n./teaclave_authentication_service &\n./teaclave_storage_service &\n./teaclave_management_service &\n./teaclave_scheduler_service &\n./teaclave_access_control_service &\n./teaclave_frontend_service &\n\ncd $TEACLAVE_BIN_INSTALL_DIR/teaclave_instance && occlum run /bin/teaclave_execution_service_libos\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);