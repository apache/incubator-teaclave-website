"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[9306],{1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(4041);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},3323:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/debugging-optee-ta","title":"Debugging OP-TEE TA","description":"When developing applications, it is inevitable that there will be a need for","source":"@site/docs/teaclave-trustzone-sdk/docs/debugging-optee-ta.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/debugging-optee-ta.md","permalink":"/trustzone-sdk-docs/debugging-optee-ta.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/debugging-optee-ta.md","slug":"/trustzone-sdk-docs/debugging-optee-ta.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Overview of OP-TEE Rust Examples","permalink":"/trustzone-sdk-docs/overview-of-optee-rust-examples"},"next":{"title":"Expanding TA Secure Memory on QEMUv8","permalink":"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md"}}');var s=t(1085),a=t(1184);const i={permalink:"/trustzone-sdk-docs/debugging-optee-ta.md",slug:"/trustzone-sdk-docs/debugging-optee-ta.md"},r="Debugging OP-TEE TA",d={},c=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"debugging-op-tee-ta",children:"Debugging OP-TEE TA"})}),"\n",(0,s.jsxs)(n.p,{children:["When developing applications, it is inevitable that there will be a need for\ndebugging. This tutorial introduces how to configure the debug environment in\nOP-TEE enabled QEMU environment. You may also check\n",(0,s.jsx)(n.a,{href:"https://optee.readthedocs.io/en/latest/building/devices/qemu.html",children:"OP-TEE documentation"}),"\nfor more information about running QEMU for Arm v8."]}),"\n",(0,s.jsxs)(n.p,{children:["To debug TEE core running QEMU with GDB, it is necessary to disable TEE ASLR with\n",(0,s.jsx)(n.code,{children:"CFG_CORE_ASLR ?= n"})," in ",(0,s.jsx)(n.code,{children:"OP-TEE/optee_os/mk/config.mk"}),". Note that you need to\nrecompile QEMU with ",(0,s.jsx)(n.code,{children:"make run"})," again. You can also choose to add the compilation\ninformation directly at compile time."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ make run CFG_CORE_ASLR=n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Since we will debug the TA remotely with a ",(0,s.jsx)(n.code,{children:"gdb"})," server, please also add the\n",(0,s.jsx)(n.code,{children:"GDBSERVER=y"})," flag when compiling QEMU."]}),"\n",(0,s.jsxs)(n.p,{children:["To debug a TA, you need to first start a gdb on the host machine. Then run\n",(0,s.jsx)(n.code,{children:"target remote :1234"})," to connect to the remote QEMU GDB server."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ ./path/to/qemu-v8-project/out-br/host/bin/aarch64-buildroot-linux-gnu-gdb\n(gdb) target remote :1234\nRemote debugging using :1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the "file" command.\n0xffffb30b00ea12b4 in ?? ()\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next, in the GDB console, load the symbol table of the TEE core library."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"(gdb) symbol-file /path/to/qemu-v8-project/optee_os/out/arm/core/tee.elf\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Taking ",(0,s.jsx)(n.code,{children:"hello_world-rs"})," as an example, you can get the start address of the text\nsection from the log in the secure world console, which is 0x40014000."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"D/LD:  ldelf:168 ELF (133af0ca-bdab-11eb-9130-43bf7873bf67) at 0x40014000\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, you can load symbols from TA file (in debug build) to the address."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"(gdb) add-symbol-file /path/to/examples/hello_world-rs/ta/target/aarch64-unknown-linux-gnu/debug/ta 0x40014000\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, you can add breakpoints according to your own needs in the corresponding\nfunctions or addresses."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"(gdb) b invoke_command\nBreakpoint 2 at 0xe11bb08: invoke_command. (6 locations)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Last, initiate the boot. You can execute ",(0,s.jsx)(n.code,{children:"hello_world-rs"})," in the normal world\nconsole, and will see that the breakpoint we set was hit."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'(gdb) c\nContinuing.\n[Switching to Thread 1.2]\n\nThread 2 hit Breakpoint 2, ta::invoke_command (cmd_id=0, params=0x4010ff00) at src/main.rs:50\n50\t    trace_println!("[+] TA invoke command");\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);