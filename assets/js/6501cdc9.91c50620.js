"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[9304],{6649:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"teaclave-faas-legacy/services/README","title":"Teaclave Services","description":"This directory contains protocol definitions and implementations of services in","source":"@site/docs/teaclave-faas-legacy/services/README.md","sourceDirName":"teaclave-faas-legacy/services","slug":"/docs/codebase/services","permalink":"/docs/codebase/services","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/services","slug":"/docs/codebase/services"},"sidebar":"teaclave-faas-legacy_sidebar","previous":{"title":"RPC","permalink":"/docs/codebase/rpc"},"next":{"title":"Teaclave Worker","permalink":"/docs/codebase/worker"}}');var i=t(4848),r=t(8453);const a={permalink:"/docs/codebase/services",slug:"/docs/codebase/services"},o="Teaclave Services",c={},l=[{value:"Services",id:"services",level:2},{value:"Topology",id:"topology",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"teaclave-services",children:"Teaclave Services"})}),"\n",(0,i.jsx)(n.p,{children:"This directory contains protocol definitions and implementations of services in\nthe Teaclave platform."}),"\n",(0,i.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,i.jsxs)(n.p,{children:["The platform includes several services (or subsystem) running inside TEE, and\ncommunicated with ",(0,i.jsx)(n.em,{children:"mutual-attested channels"}),". They coordinate together to provide\na safe and secure FaaS platform."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Service"}),": A reference implementation of user authentication\ninfrastructure. Here, we use JSON Web Token (JWT), a simple and widely-used\nauthentication standard, to provide a secure authentication mechanism in the\nplatform. Clients need to get valid token before interacting with the platform."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frontend Service"}),": This is the entry point of all requests from users. It will\nvalidate user's identity/token and forward requests to appropriate services."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Management Service"}),": This service plays an important role in the whole services.\nIt handles almost all requests, such as registering functions/data, creating\ntasks, and invoking tasks. Also, the management service will contact the\naccess control service to authorize operations when needed. In addition, task\nand function information will be persistent into the storage services."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage Service"}),": Basically, the storage service stores persistent data like\nfunction, execution data, and task information in the platform. Here, we\ndeploy a key-value database (an implementation of LevelDB) in TEE and use the\nprotected file system (secured by the enclave) for data persistence."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access Control Service"}),": Provides a flexible access control domain specific\nlanguage to support access control rules for secure multi-party computation.\nThe access control engine is written in Python and evaluated in SGX. Please\nread ",(0,i.jsx)(n.a,{href:"/docs/access-control",children:"this document"})," to learn more about the design of it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scheduler Service"}),": Schedules staged tasks ready for execution to a proper\nexecution node with desirable capabilities."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution Service"}),": A host of different executors interacting with the\nscheduler service to complete tasks. There could be many execution service\ninstances (or nodes) with different capabilities deployed in a cloud\ninfrastructure."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To learn more about the design and internal implementation of services, please\nread ",(0,i.jsx)(n.a,{href:"/docs/service-internals",children:"Teaclave Service Internals"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"topology",children:"Topology"}),"\n",(0,i.jsx)(n.p,{children:"These services are communicating through RPC with remote attestation.\nThis topological graph illustrates connections between services."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"clients => authentication <-+       +----\x3e storage <----+\n                            |       |                   |\nclients => frontend ----------\x3e management            scheduler <-- execution\n                                    |\n                                    +--\x3e access_control\n\n\n                                                  =>      api endpoint connections\n                                                  -> internal endpoint connections\n"})}),"\n",(0,i.jsx)(n.p,{children:"Internal endpoint connections will be established and verified with mutual\nremote attestation to ensure the integrity and confidentiality of the whole system.\nTherefore, clients can trust the whole platform and safely interacting with the\nsystem through the attested authentication and frontend services."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);