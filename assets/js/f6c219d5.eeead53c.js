"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[523],{1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(4041);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},7124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"teaclave/docs/development-tips","title":"Development Tips","description":"RLS/rust-analyzer and IDEs","source":"@site/docs/teaclave/docs/development-tips.md","sourceDirName":"teaclave/docs","slug":"/docs/development-tips","permalink":"/docs/development-tips","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/development-tips","slug":"/docs/development-tips"},"sidebar":"teaclave_sidebar","previous":{"title":"Release Guide","permalink":"/docs/release-guide"},"next":{"title":"Rust Development Guideline","permalink":"/docs/rust-guildeline"}}');var s=t(1085),o=t(1184);const i={permalink:"/docs/development-tips",slug:"/docs/development-tips"},l="Development Tips",a={},d=[{value:"RLS/rust-analyzer and IDEs",id:"rlsrust-analyzer-and-ides",level:2},{value:"Logging",id:"logging",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-tips",children:"Development Tips"})}),"\n",(0,s.jsx)(n.h2,{id:"rlsrust-analyzer-and-ides",children:"RLS/rust-analyzer and IDEs"}),"\n",(0,s.jsxs)(n.p,{children:["The most common question on developing Teaclave is how to use Rust IDEs to\nimprove the development experience, e.g., code completions, type hints and cross\nreferences. Internally, these features are supported by either\n",(0,s.jsx)(n.a,{href:"https://github.com/rust-lang/rls",children:"RLS"})," or\n",(0,s.jsx)(n.a,{href:"https://github.com/rust-analyzer/rust-analyzer",children:"rust-analyzer"}),". Unfortunately,\nthese features are not supported in Teaclave's codebase out-of-box.\nThe reason is that Teaclave has components targeting different environments (SGX\nenclave and Linux app) which need different set of dependencies (SGX crates and\nvanilla crates). To support this flexible building and linking process, we are\nusing cmake for our ",(0,s.jsx)(n.a,{href:"/docs/build-system",children:"build system"}),". However, there are still\nways to workaround and let the analyzer understand the project structures."]}),"\n",(0,s.jsxs)(n.p,{children:["When developing SGX enclaves and corresponding dependent crates, you need to\nprepare set of cargo files in the root directory to help the analyzer. This\nincludes ",(0,s.jsx)(n.code,{children:"Cargo.toml"})," which can be copied from our build system:\n",(0,s.jsx)(n.code,{children:"cmake/tomls/Cargo.sgx_trusted_lib.toml"}),"; ",(0,s.jsx)(n.code,{children:"Cargo.lock"})," which can be copied from\n",(0,s.jsx)(n.code,{children:"third_party/crates-sgx/Cargo.lock"}),"; ",(0,s.jsx)(n.code,{children:".cargo/config"})," which can be copied from\n",(0,s.jsx)(n.code,{children:"third_party/crates-sgx/config"}),". Similarly, when developing the app parts, you\ncan copy the ",(0,s.jsx)(n.code,{children:"cmake/tomls/Cargo.sgx_untrusted_lib.toml"})," file to the root\ndirectory as ",(0,s.jsx)(n.code,{children:"Cargo.toml"}),", and ",(0,s.jsx)(n.code,{children:".cargo/config"})," and ",(0,s.jsx)(n.code,{children:"Cargo.lock"})," files can be\nfound in ",(0,s.jsx)(n.code,{children:"third_party/crates-io/"})," directory. Besides, please also change the\nlast line of ",(0,s.jsx)(n.code,{children:'directory = "vendor"'})," to ",(0,s.jsx)(n.code,{children:'directory = "third_party/crates-sgx/vendor"'})," or ",(0,s.jsx)(n.code,{children:'directory ="third_party/crates-io/vendor"'}),"\nso the dependencies can be resolved automatically. For standalone Rust\napplications such as CLI, no ",(0,s.jsx)(n.code,{children:"Cargo.toml"})," is needed. After the preparation of\n",(0,s.jsx)(n.code,{children:"Cargo.toml"})," in root, RLS/rust-analyzer can understand the projects finally. You\nwill see type hints and cross references using IDEs with extensions."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["**NOTE ** ",(0,s.jsx)(n.br,{}),"\nYou can also simply use the script ",(0,s.jsx)(n.code,{children:"tools/scripts/ide.sh <trusted|untrusted|clean>"}),"\nto prepare a IDE-friendly developing environment for trusted\npart, untrusetd part, or remove the files generated by this script."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,s.jsxs)(n.p,{children:["Teaclave utilizes the ",(0,s.jsx)(n.a,{href:"https://github.com/sebasmagri/env_logger/",children:(0,s.jsx)(n.code,{children:"env_logger"})}),"\ncrate to configure the display of ",(0,s.jsx)(n.em,{children:"debug logs"})," via environment variables."]}),"\n",(0,s.jsxs)(n.p,{children:["Logging is controlled via the ",(0,s.jsx)(n.code,{children:"TEACLAVE_LOG"})," environment variables and the value\nof this variable is a comma-separated list of logging directives in the\n",(0,s.jsx)(n.code,{children:"path::to::module=level"})," form. For example, you can set the environment\n",(0,s.jsx)(n.code,{children:"TEACLAVE_LOG=attestation=debug"})," before launching a service to print the debug\nlevel (and higher-level) logs in the ",(0,s.jsx)(n.code,{children:"attestation"})," module to stdout/stderr.\nThere are five logging levels: ",(0,s.jsx)(n.code,{children:"error"}),", ",(0,s.jsx)(n.code,{children:"warn"}),", ",(0,s.jsx)(n.code,{children:"info"}),", ",(0,s.jsx)(n.code,{children:"debug"})," and ",(0,s.jsx)(n.code,{children:"trace"}),"\nwhere error represents the highest-priority log level. Furthermore, you can also\nfilter the results with regular expression by simply put ",(0,s.jsx)(n.code,{children:"/"})," followed by a regex\nin the directives in the environment variable. You can find more filter usages\nin the ",(0,s.jsx)(n.code,{children:"env_logger"}),"'s\n",(0,s.jsx)(n.a,{href:"https://docs.rs/env_logger/0.7.1/env_logger/index.html#filtering-results",children:"document"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"})," ",(0,s.jsx)(n.br,{}),"\nTo prevent sensitive information leakage through logging, for the release build,\nwe disable all logging (at build time) lower than the ",(0,s.jsx)(n.code,{children:"info"})," level. That is,\nonly ",(0,s.jsx)(n.code,{children:"error"}),", ",(0,s.jsx)(n.code,{children:"warn"})," and ",(0,s.jsx)(n.code,{children:"info"})," logs will be printed."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);