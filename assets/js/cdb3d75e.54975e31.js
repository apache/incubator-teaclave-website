"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[6522],{1184:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>o});var r=n(4041);const s={},a=r.createContext(s);function d(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(a.Provider,{value:t},e.children)}},9966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"teaclave/third_party/README","title":"Third-Party Dependency Vendoring","description":"For Teaclave, since all SGX/enclave dependencies are part of trusted computing base (TCB),","source":"@site/docs/teaclave/third_party/README.md","sourceDirName":"teaclave/third_party","slug":"/docs/codebase/third-party","permalink":"/docs/codebase/third-party","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/third-party","slug":"/docs/codebase/third-party"},"sidebar":"teaclave_sidebar","previous":{"title":"Test Harness and Test Cases","permalink":"/docs/codebase/tests"},"next":{"title":"Tools","permalink":"/docs/codebase/tools"}}');var s=n(1085),a=n(1184);const d={permalink:"/docs/codebase/third-party",slug:"/docs/codebase/third-party"},o="Third-Party Dependency Vendoring",i={},c=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"third-party-dependency-vendoring",children:"Third-Party Dependency Vendoring"})}),"\n",(0,s.jsxs)(t.p,{children:["For Teaclave, since all SGX/enclave dependencies are part of trusted computing base (TCB),\nin order to ease auditing, ensure product stability, as well as reduce the\npossibility of the ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Supply_chain_attack",children:"supply chain attack"}),",\nall TEE dependencies should be vendored. Then during the build process, both the\nuntrusted (i.e., the app part) and trusted components (i.e., the enclave part)\nwill only consume packages from this designated repository and will not\ndownload any code from external package registry such as\n",(0,s.jsx)(t.a,{href:"https://crates.io",children:"crates.io"}),". The vendoring of Rust crates are not done here\nfor development ease but are recommended for production use."]}),"\n",(0,s.jsx)(t.p,{children:"Basically, we have these submodules:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"rust-sgx-sdk"}),": Teaclave SGX SDK for standard libraries and Rust bindings of\nSGX libraries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"webassembly-micro-runtime"}),": A sandboxed runtime to execute(interpret)\nWebAssembly bytecode."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);