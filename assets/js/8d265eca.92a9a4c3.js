"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[9581],{157:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/migrating-to-new-building-env","title":"Migrating To New Building ENV","description":"After optee-utee-build release, this doc is keeping for developers","source":"@site/docs/teaclave-trustzone-sdk/docs/migrating-to-new-building-env.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/migrating-to-new-building-env.md","permalink":"/trustzone-sdk-docs/migrating-to-new-building-env.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/migrating-to-new-building-env.md","slug":"/trustzone-sdk-docs/migrating-to-new-building-env.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Expanding TA Secure Memory on QEMUv8","permalink":"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md"},"next":{"title":"Debugging OP-TEE TA","permalink":"/trustzone-sdk-docs/debugging-optee-ta.md"}}');var t=s(4848),r=s(8453);const o={permalink:"/trustzone-sdk-docs/migrating-to-new-building-env.md",slug:"/trustzone-sdk-docs/migrating-to-new-building-env.md"},d="Migrating To New Building ENV",c={},a=[{value:"Migration Guide: Moving from <code>master</code> to <code>main</code> Branch (Post-Oct 2024)",id:"migration-guide-moving-from-master-to-main-branch-post-oct-2024",level:2},{value:"Current Structure",id:"current-structure",level:3},{value:"Changes in Build Scripts",id:"changes-in-build-scripts",level:3},{value:"Step 1: Migrating Projects",id:"step-1-migrating-projects",level:3},{value:"Case 1: Default Migration (No Custom Modifications to Build Scripts)",id:"case-1-default-migration-no-custom-modifications-to-build-scripts",level:4},{value:"Case 2: Custom Migration (With Modified Build Scripts)",id:"case-2-custom-migration-with-modified-build-scripts",level:4},{value:"Step 2: <strong>Update <code>Cargo.toml</code></strong>",id:"step-2-update-cargotoml",level:3},{value:"Step 3: <strong>Build and Resolve Errors</strong>",id:"step-3-build-and-resolve-errors",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"migrating-to-new-building-env",children:"Migrating To New Building ENV"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["After optee-utee-build release, this doc is keeping for developers\nwho intend to know the detail of building process, we suggest use\n",(0,t.jsx)(n.a,{href:"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md",children:"optee-utee-build"})," for building\ninstead."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"migration-guide-moving-from-master-to-main-branch-post-oct-2024",children:["Migration Guide: Moving from ",(0,t.jsx)(n.code,{children:"master"})," to ",(0,t.jsx)(n.code,{children:"main"})," Branch (Post-Oct 2024)"]}),"\n",(0,t.jsxs)(n.p,{children:["Since the ",(0,t.jsx)(n.code,{children:"main"})," branch (after October 2024) introduces breaking changes\nto the build environment, if users of the legacy ",(0,t.jsx)(n.code,{children:"master"})," branch want to\nkeep upstream or use a new version of the Rust toolchain, they will need\nto migrate their TA to the new environment."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that the migration is mainly for building scripts to support both\n",(0,t.jsx)(n.code,{children:"no-std"})," and ",(0,t.jsx)(n.code,{children:"std"})," building for TA, no need for modifying your application\ncode."]}),"\n",(0,t.jsx)(n.h3,{id:"current-structure",children:"Current Structure"}),"\n",(0,t.jsxs)(n.p,{children:["We have retained almost the same structure as the original but removed\n",(0,t.jsx)(n.code,{children:"ta_arm.lds"})," and ",(0,t.jsx)(n.code,{children:"ta_aarch64.lds"})," from the directory structure. Besides\nwe have some modification on ",(0,t.jsx)(n.code,{children:"ta/ta_static.rs"}),", ",(0,t.jsx)(n.code,{children:"ta/build.rs"})," and all\n",(0,t.jsx)(n.code,{children:"Makefile"}),"s. (See the explanation in next part)."]}),"\n",(0,t.jsxs)(n.p,{children:["For example the current ",(0,t.jsx)(n.code,{children:"examples/acipher-rs/"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"examples/acipher-rs/\n\u251c\u2500\u2500 host\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u251c\u2500\u2500 Makefile\n\u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0     \u2514\u2500\u2500 main.rs\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 proto\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.rs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0     \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 ta\n\u2502\xa0\xa0 \u251c\u2500\u2500 build.rs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u251c\u2500\u2500 Makefile\n\u2502\xa0\xa0 \u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 main.rs\n\u2502\xa0\xa0 \u251c\u2500\u2500 ta_static.rs\n\u2502\xa0\xa0 \u2514\u2500\u2500 Xargo.toml\n\u2514\u2500\u2500 uuid.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"changes-in-build-scripts",children:"Changes in Build Scripts"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TA linking script"}),": ",(0,t.jsx)(n.code,{children:"ta_arm.lds"})," and ",(0,t.jsx)(n.code,{children:"ta_aarch64.lds"}),".",(0,t.jsx)(n.br,{}),"\nThese linking scripts define the low-level TA ELF sections arrangement\n(e.g., ",(0,t.jsx)(n.code,{children:".text"})," section in ELF). They have been removed, and we now use\nthe ",(0,t.jsx)(n.code,{children:"lds"})," file from OP-TEE's TA dev-kit, for example, located in\n",(0,t.jsx)(n.code,{children:"optee_os/out/arm-plat-vexpress/export-ta_arm64/src/ta.ld.S"}),". This\nchange helps to stay upstream with OP-TEE OS and makes it more stable\nwhen running on OP-TEE OS."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ta_static.rs"})}),": C FFI primitives, such as ",(0,t.jsx)(n.code,{children:"ta_heap_size"})," and ",(0,t.jsx)(n.code,{children:"ta_props"}),".",(0,t.jsx)(n.br,{}),"\nThis file helps to set TA properties in a C-like manner in the TA ELF\nfor OP-TEE OS to load.",(0,t.jsx)(n.br,{}),"\nThe change involves modifying imports of primitives, e.g., from\n",(0,t.jsx)(n.code,{children:"libc::c_int"})," to ",(0,t.jsx)(n.code,{children:"core::c_int"}),", and from ",(0,t.jsx)(n.code,{children:"std::u64::MAX"})," to\n",(0,t.jsx)(n.code,{children:"core::primitive::u64::MAX"}),". This helps ensure support for both ",(0,t.jsx)(n.code,{children:"no_std"}),"\nand ",(0,t.jsx)(n.code,{children:"std"}),"-based environments."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"build.rs"})}),":",(0,t.jsx)(n.br,{}),"\nSince TA is not a normal ELF, it has a header before the ELF sections.",(0,t.jsx)(n.br,{}),"\nThis file is the main entry point for building a TA as ELF and adding\nthe specific header. It uses configurations such as ",(0,t.jsx)(n.code,{children:"ta_static.rs"}),",\n",(0,t.jsx)(n.code,{children:"user_ta_header.rs"}),", and the linking script ",(0,t.jsx)(n.code,{children:"ta.ld.S"}),". It also defines\nthe linking with OP-TEE's C libraries (",(0,t.jsx)(n.code,{children:"libutee"})," and ",(0,t.jsx)(n.code,{children:"libutils"}),") from\nOP-TEE's TA dev-kit."]}),"\n",(0,t.jsx)(n.p,{children:"The changes are:"}),"\n",(0,t.jsxs)(n.p,{children:["a. Move linking parameters from the original\n",(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/blob/master/.cargo/config",children:(0,t.jsx)(n.code,{children:"/.cargo/config"})}),":\nThis change is primarily designed to accommodate more complex build targets.\nFor standard TAs, the specific build targets are ",(0,t.jsx)(n.code,{children:"aarch64-unknown-optee-trustzone"}),"\nand ",(0,t.jsx)(n.code,{children:"arm-unknown-optee-trustzone"}),".\nFor example, in the no-std mode for aarch64, both no-std TAs and CAs are built\nwith the ",(0,t.jsx)(n.code,{children:"aarch64-unknown-linux-gnu"})," target. However, in std mode, TAs are\nbuilt with the ",(0,t.jsx)(n.code,{children:"aarch64-unknown-optee-trustzone"})," target, while CAs remain\nbuilt with the ",(0,t.jsx)(n.code,{children:"aarch64-unknown-linux-gnu"})," target.\nThis change allows us to decouple TA's linking parameters from the target, as\nthey are now defined within TA's ",(0,t.jsx)(n.code,{children:"build.rs"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["b. Add ",(0,t.jsx)(n.code,{children:"cargo:rustc-link-arg=--no-warn-mismatch"})," to work around\nthe EABI version mismatch linking error: symbols.o with EABI version 0\nand other objects are EABI version 5."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ENV variables"}),":",(0,t.jsx)(n.br,{}),"\nThe original script for setting the toolchain path has some modifications.\nDue to the more complex building options mentioned above, ",(0,t.jsx)(n.code,{children:"CROSS_COMPILE_{HOST, TA}"}),"\nand ",(0,t.jsx)(n.code,{children:"TARGET_{HOST, TA}"})," should be set by ",(0,t.jsx)(n.code,{children:"source environment"}),".\nYou should also set whether you want to build in ",(0,t.jsx)(n.code,{children:"STD"})," mode (",(0,t.jsx)(n.code,{children:"export STD=y"}),")\nand specify the target architecture (",(0,t.jsx)(n.code,{children:"ARM32"})," or ",(0,t.jsx)(n.code,{children:"AArch64"}),") for both CA and TA.\nRunning ",(0,t.jsx)(n.code,{children:"source environment"})," will set up all toolchains and libraries."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Makefile Polishing"}),":",(0,t.jsx)(n.br,{}),"\na. Top-level Makefile (",(0,t.jsx)(n.code,{children:"examples/*/Makefile"}),"): Reads the ",(0,t.jsx)(n.code,{children:"CROSS_COMPILE_{HOST, TA}"}),"\nand ",(0,t.jsx)(n.code,{children:"TARGET_{HOST, TA}"}),".",(0,t.jsx)(n.br,{}),"\nb. ",(0,t.jsx)(n.code,{children:"host/Makefile"}),": Simplified and polished for the changes in ENV variables.",(0,t.jsx)(n.br,{}),"\nc. ",(0,t.jsx)(n.code,{children:"ta/Makefile"}),": For ",(0,t.jsx)(n.code,{children:"std"})," TAs, checks if the ",(0,t.jsx)(n.code,{children:"STD"})," environment variable is set,\nand further simplifications and polish are done."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-1-migrating-projects",children:"Step 1: Migrating Projects"}),"\n",(0,t.jsx)(n.h4,{id:"case-1-default-migration-no-custom-modifications-to-build-scripts",children:"Case 1: Default Migration (No Custom Modifications to Build Scripts)"}),"\n",(0,t.jsxs)(n.p,{children:["If you have developed based on one of our example structures and haven't\nmodified the build scripts mentioned above, you can simply copy a current\nexample and move your code into it.",(0,t.jsx)(n.br,{}),"\nNote that the ",(0,t.jsx)(n.code,{children:"Makefile"})," for ",(0,t.jsx)(n.code,{children:"std"})," TAs has tiny differences from the ",(0,t.jsx)(n.code,{children:"no_std"}),"\none. If you are using a ",(0,t.jsx)(n.code,{children:"no_std"})," TA, refer to ",(0,t.jsx)(n.code,{children:"hello_world-rs"}),". For ",(0,t.jsx)(n.code,{children:"std"})," TAs,\nrefer to ",(0,t.jsx)(n.code,{children:"serde-rs"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We provide a shell script to assist with this migration (you may need to make\nsmall adjustments based on whether you are building in ",(0,t.jsx)(n.code,{children:"no_std"})," or ",(0,t.jsx)(n.code,{children:"std"})," mode).\nHere is an example for ",(0,t.jsx)(n.code,{children:"no_std"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'TARGET_EXAMPLE="your_project"\nOLD_ROOT_PATH="/path/to/old/sdk"\nNEW_PATH="/path/to/current/sdk"\n\n# Duplicate the hello-world example in the new path as a template\ncp -r ${NEW_PATH}/examples/hello_world-rs ${NEW_PATH}/examples/${TARGET_EXAMPLE}\n\n# Remove the source code directory and copy from the old path to the new path\n# including: src/ and Cargo.toml in host, ta, proto\n(cd ${NEW_PATH}/examples/${TARGET_EXAMPLE}/host && rm -rf src/ Cargo.* && \\\ncp -r ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/host/src . && \\\ncp ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/host/Cargo.toml .)\n(cd ${NEW_PATH}/examples/${TARGET_EXAMPLE}/ta && rm -rf src/ Cargo.* && \\\ncp -r ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/ta/src . && \\\ncp ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/ta/Cargo.toml .)\n(cd ${NEW_PATH}/examples/${TARGET_EXAMPLE}/proto && rm -rf src/ Cargo.* && \\\ncp -r ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/proto/src . && \\\ncp ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/proto/Cargo.toml .)\n\n# Copy the UUID file from the old path to the new path\ncp ${OLD_ROOT_PATH}/examples/${TARGET_EXAMPLE}/uuid.txt \\\n${NEW_PATH}/examples/${TARGET_EXAMPLE}/uuid.txt\n\n# Update binary names in host/Cargo.toml and host/Makefile\nsed -i "s/hello_world-rs/${TARGET_EXAMPLE}/g" \\\n${NEW_PATH}/examples/${TARGET_EXAMPLE}/host/Cargo.toml\nsed -i "s/hello_world-rs/${TARGET_EXAMPLE}/g" \\\n${NEW_PATH}/examples/${TARGET_EXAMPLE}/host/Makefile\n'})}),"\n",(0,t.jsx)(n.h4,{id:"case-2-custom-migration-with-modified-build-scripts",children:"Case 2: Custom Migration (With Modified Build Scripts)"}),"\n",(0,t.jsx)(n.p,{children:"If you have made changes to your build scripts, follow the steps below to\nmanually migrate those files:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["TA linking script ",(0,t.jsx)(n.code,{children:"ta_arm.lds"})," and ",(0,t.jsx)(n.code,{children:"ta_aarch64.lds"})]}),":",(0,t.jsx)(n.br,{}),"\nUsually, developers don't need to modify those files. If you have made any\nchanges, compare the diff between your file and\n",(0,t.jsx)(n.code,{children:"optee_os/out/arm-plat-vexpress/export-ta_{arm64, arm32}/src/ta.ld.S"})," in the\ncurrent SDK.\nThis ",(0,t.jsx)(n.code,{children:"ta.ld.S"})," file is currently not included in SDK but in OPTEE_OS repo."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ta_static.rs"})}),":",(0,t.jsx)(n.br,{}),"\nUsually, developers don't need to modify this file. If you have made\nmodifications to this file, compare them with the latest version here:",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..9e3906e9d82f0471e96bf892afe0df37dd90a86e#diff-c0cdd7b28f558bd417069b8e60ed35b70ac1cd01e68e3c0ba6c7311a5a444e22",children:"ta_static.rs diff"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"build.rs"})}),":",(0,t.jsx)(n.br,{}),"\nUsually, developers don't need to modify this file. If you have made\nchanges to link other libraries or dependencies in ",(0,t.jsx)(n.code,{children:"build.rs"}),", compare\nthe two versions and migrate accordingly:",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..9e3906e9d82f0471e96bf892afe0df37dd90a86e#diff-c07432a8a8ecbc1f00799a2bd008bd8dcbba9d58fd0a9e5815b835e4ed425e86",children:"build.rs diff"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Makefiles"}),":",(0,t.jsx)(n.br,{}),"\nYou may have modified some of the Makefiles. Please compare them\nwith the current versions to ensure compatibility:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["For ",(0,t.jsx)(n.code,{children:"no_std"})," builds"]}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-df315bfec3c0b8e84c64b31e4450660ea66c33aa833f5b1b9d76250481c15887",children:"Top-level Makefile"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-96468cc392cceb21806dbfb2dd24007d772f19992955ed81c4979a45f753378a",children:"Host Makefile"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-29c530c8f83308f34fae9b3516015f07fa80c1b879cc9a8834c4dfaa497af1a5",children:"TA Makefile"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["For ",(0,t.jsx)(n.code,{children:"std"})," builds"]}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-15685120d44f0ca4ea11ac90799a621f19378cebf5b018792ebc25bee68c3824",children:"Top-level Makefile"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-dfb3cbc25e6b4bad652b716b9d051c9fb7c45d2d8303caa936666774c49a624a",children:"Host Makefile"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/compare/cd19ac2e1c3cb1a848d5131d4af8138d84be8708..dc1523cbcf6c716213854d9a16d39b8d498a9bb6#diff-e0618a8a49e0ac65dd1acd48a0108c280a3821bcfb233f46f4baa56c77369001",children:"TA Makefile"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"step-2-update-cargotoml",children:["Step 2: ",(0,t.jsxs)(n.strong,{children:["Update ",(0,t.jsx)(n.code,{children:"Cargo.toml"})]})]}),"\n",(0,t.jsxs)(n.p,{children:["You may need to update your ",(0,t.jsx)(n.code,{children:"Cargo.toml"})," file to include newer\nversions of crates that depend on the new Rust toolchain. Refer to\nthe ",(0,t.jsx)(n.code,{children:"rust-toolchain.toml"})," file to verify the current toolchain. If\nyou update any crates, be prepared for potential code changes to\naccommodate new interfaces."]}),"\n",(0,t.jsxs)(n.h3,{id:"step-3-build-and-resolve-errors",children:["Step 3: ",(0,t.jsx)(n.strong,{children:"Build and Resolve Errors"})]}),"\n",(0,t.jsx)(n.p,{children:"After updating the necessary files, rebuild the project. During the\nprocess, errors might arise due to crate version mismatches or\nother updates. Make sure to resolve these errors by adjusting your\ncode accordingly."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);