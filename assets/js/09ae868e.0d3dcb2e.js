"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[8167],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var d=t(6540);const r={},s=d.createContext(r);function i(e){const n=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),d.createElement(s.Provider,{value:n},e.children)}},8599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/building-rust-ca-as-android-elf","title":"Building Rust CA as Android ELF","description":"In Teaclave TrustZone SDK, example CAs are built as ARM64 Linux ELF by default.","source":"@site/docs/teaclave-trustzone-sdk/docs/building-rust-ca-as-android-elf.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md","permalink":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md","slug":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Writing Rust TAs using optee-utee-build","permalink":"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md"},"next":{"title":"Advanced Setup","permalink":"/trustzone-sdk-docs/advanced-setup.md"}}');var r=t(4848),s=t(8453);const i={permalink:"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md",slug:"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md"},o="Building Rust CA as Android ELF",l={},a=[];function c(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"building-rust-ca-as-android-elf",children:"Building Rust CA as Android ELF"})}),"\n",(0,r.jsx)(n.p,{children:"In Teaclave TrustZone SDK, example CAs are built as ARM64 Linux ELF by default.\nBesides, you can follow these steps to build Rust CAs running on the Android\nplatform:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Download Android NDK toolchain"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip\n$ unzip android-ndk-r21e-linux-x86_64.zip\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Add the android target"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ rustup target add aarch64-linux-android\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Set toolchains for the target. Add PATH env:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export PATH=$PATH:/your/path/to/android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin/\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["Edit ",(0,r.jsx)(n.code,{children:"incubator-teaclave-trustzone-sdk/.cargo/config"}),", add:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[target.aarch64-linux-android]\nlinker = "aarch64-linux-android28-clang"\nar = "aarch64-linux-android-ar"\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:["Copy Android libteec.so to\n",(0,r.jsx)(n.code,{children:"/incubator-teaclave-trustzone-sdk/optee/optee_client/out/export/usr/lib"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Note: If you've not built the libteec.so of Android, you can build it using:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ cd /path/to/optee/optee_client/\n$ ndk-build APP_BUILD_SCRIPT=./Android.mk NDK_PROJECT_PATH=. NDK_LOG=1 APP_PLATFORM=android-29\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Modify CA's Makefile:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"NAME := hello_world-rs\nTARGET := aarch64-linux-android\nOPTEE_DIR ?= ../../../optee\nOUT_DIR := $(CURDIR)/target/$(TARGET)/release\n\nall: host\n\nhost:\n        @cargo build --target $(TARGET) --release --verbose\nclean:\n        @cargo clean\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"7",children:["\n",(0,r.jsx)(n.li,{children:"build:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ make -C examples/hello_world-rs/host\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);