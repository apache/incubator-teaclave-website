"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[3220],{4946:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/advanced-setup","title":"Advanced Setup: Customize Your Build Environment","description":"Platforms","source":"@site/docs/teaclave-trustzone-sdk/docs/advanced-setup.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/advanced-setup.md","permalink":"/trustzone-sdk-docs/advanced-setup.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/advanced-setup.md","slug":"/trustzone-sdk-docs/advanced-setup.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Building Rust CA as Android ELF","permalink":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md"},"next":{"title":"Expanding TA Secure Memory on QEMUv8","permalink":"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md"}}');var i=s(4848),l=s(8453);const r={permalink:"/trustzone-sdk-docs/advanced-setup.md",slug:"/trustzone-sdk-docs/advanced-setup.md"},o="Advanced Setup: Customize Your Build Environment",a={},d=[{value:"Platforms",id:"platforms",level:2},{value:"Develop with QEMUv8",id:"develop-with-qemuv8",level:3},{value:"Develop on Other Platforms",id:"develop-on-other-platforms",level:3},{value:"Setup Building Environment",id:"setup-building-environment",level:2},{value:"Build Examples",id:"build-examples",level:2},{value:"Run Rust Applications",id:"run-rust-applications",level:2},{value:"Run Rust Applications in QEMUv8",id:"run-rust-applications-in-qemuv8",level:3},{value:"Run Rust Applications on Other Platforms",id:"run-rust-applications-on-other-platforms",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"advanced-setup-customize-your-build-environment",children:"Advanced Setup: Customize Your Build Environment"})}),"\n",(0,i.jsx)(n.h2,{id:"platforms",children:"Platforms"}),"\n",(0,i.jsxs)(n.p,{children:["To get started with Teaclave TrustZone SDK, you could choose either ",(0,i.jsx)(n.a,{href:"#develop-with-qemuv8",children:"QEMU for\nArmv8-A"})," (QEMUv8) or ",(0,i.jsx)(n.a,{href:"#develop-on-other-platforms",children:"other\nplatforms"})," (",(0,i.jsx)(n.a,{href:"https://optee.readthedocs.io/en/latest/general/platforms.html",children:"platforms OP-TEE\nsupported"}),") as\nyour development environment."]}),"\n",(0,i.jsx)(n.h3,{id:"develop-with-qemuv8",children:"Develop with QEMUv8"}),"\n",(0,i.jsxs)(n.p,{children:["The OP-TEE libraries are needed when building Rust applications, so you should\nfinish the ",(0,i.jsx)(n.a,{href:"#quick-start-with-the-op-tee-repo-for-qemuv8",children:"Quick start with the OP-TEE Repo for\nQEMUv8"})," part first. Then\ninitialize the building environment in Teaclave TrustZone SDK, build Rust\napplications and copy them into the target's filesystem."]}),"\n",(0,i.jsxs)(n.p,{children:["Teaclave TrustZone SDK is located in ",(0,i.jsx)(n.code,{children:"[YOUR_OPTEE_DIR]/optee_rust/"}),". Teaclave\nTrustZone SDK in OP-TEE repo is pinned to the release version. Alternatively,\nyou can try the develop version using ",(0,i.jsx)(n.code,{children:"git pull"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cd [YOUR_OPTEE_DIR]/optee_rust/\ngit pull github master\n"})}),"\n",(0,i.jsx)(n.h3,{id:"develop-on-other-platforms",children:"Develop on Other Platforms"}),"\n",(0,i.jsxs)(n.p,{children:["If you are building trusted applications for other platforms (",(0,i.jsx)(n.a,{href:"https://optee.readthedocs.io/en/latest/general/platforms.html",children:"platforms OP-TEE\nsupported"}),"). QEMU\nand the filesystem in the OP-TEE repo are not needed.  You can follow these\nsteps to clone the project and build applications independently from the\ncomplete OP-TEE repo. In this case, the necessary OP-TEE libraries are\ninitialized in the setup process."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The complete list of prerequisites can be found here: ",(0,i.jsx)(n.a,{href:"https://optee.readthedocs.io/en/latest/building/prerequisites.html",children:"OP-TEE\nPrerequisites"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"# install dependencies\nsudo apt-get install android-tools-adb android-tools-fastboot autoconf \\\nautomake bc bison build-essential ccache cscope curl device-tree-compiler \\\nexpect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev \\\nlibfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev \\\nlibpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make \\\nmtools netcat python-crypto python3-crypto python-pyelftools \\\npython3-pycryptodome python3-pyelftools python-serial python3-serial \\\nrsync unzip uuid-dev xdg-utils xterm xz-utils zlib1g-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can use a docker container built with our\n",(0,i.jsx)(n.a,{href:"Dockerfile",children:"Dockerfile"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"After installing dependencies or building the Docker image, fetch the source\ncode from the official GitHub repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/apache/incubator-teaclave-trustzone-sdk.git\ncd incubator-teaclave-trustzone-sdk\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setup-building-environment",children:"Setup Building Environment"}),"\n",(0,i.jsxs)(n.p,{children:["Currently, we support building on both ",(0,i.jsx)(n.code,{children:"aarch64"})," and ",(0,i.jsx)(n.code,{children:"x86_64"})," host machines, and\nthey share the same steps."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Install the Rust environment and toolchains:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"./setup.sh\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Build OP-TEE libraries"}),"\n",(0,i.jsxs)(n.p,{children:["By default, the ",(0,i.jsx)(n.code,{children:"OPTEE_DIR"})," is\n",(0,i.jsx)(n.code,{children:"incubator-teaclave-trustzone-sdk/optee/"}),". OP-TEE submodules\n(",(0,i.jsx)(n.code,{children:"optee_os"})," and ",(0,i.jsx)(n.code,{children:"optee_client"})," for QEMUv8) will be initialized\nautomatically by executing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"./build_optee_libraries.sh optee/\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Before building applications, set up the configuration:"}),"\n",(0,i.jsxs)(n.p,{children:["a. By default, the target platform is ",(0,i.jsx)(n.code,{children:"aarch64"})," for both CA and TA. If\nyou want to build for the ",(0,i.jsx)(n.code,{children:"arm"})," target, you can set up ",(0,i.jsx)(n.code,{children:"ARCH"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"export ARCH_HOST=arm\nexport ARCH_TA=arm\n"})}),"\n",(0,i.jsxs)(n.p,{children:["b. By default, the build is for ",(0,i.jsx)(n.code,{children:"no-std"})," TA. If you want to enable\n",(0,i.jsx)(n.code,{children:"std"})," TA, set the ",(0,i.jsx)(n.code,{children:"STD"})," variable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"export STD=y\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run this script to set up all toolchain and library paths:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"source environment\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"build-examples",children:"Build Examples"}),"\n",(0,i.jsx)(n.p,{children:"Run this command to build all Rust examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"make examples\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or build your own CA and TA:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"make -C examples/[YOUR_APPLICATION]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Besides, you can collect all example CAs and TAs to\n",(0,i.jsx)(n.code,{children:"/incubator-teaclave-trustzone-sdk/out"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"make examples-install\n"})}),"\n",(0,i.jsx)(n.h2,{id:"run-rust-applications",children:"Run Rust Applications"}),"\n",(0,i.jsxs)(n.p,{children:["Considering the platform has been chosen\n(",(0,i.jsx)(n.a,{href:"#run-rust-applications-in-qemuv8",children:"QEMUv8"})," or\n",(0,i.jsx)(n.a,{href:"#run-rust-applications-on-other-platforms",children:"other"}),"), the ways to run the Rust\napplications are different."]}),"\n",(0,i.jsx)(n.h3,{id:"run-rust-applications-in-qemuv8",children:"Run Rust Applications in QEMUv8"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The shared folder is needed to share CAs and TAs with the QEMU guest system.\nRecompile QEMU in OP-TEE to enable QEMU VirtFS:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"(cd $OPTEE_DIR/build && make QEMU_VIRTFS_ENABLE=y qemu)\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Copy all the Rust examples or your own applications to the shared folder:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"mkdir shared_folder\ncd [YOUR_OPTEE_DIR]/optee_rust/ && make examples-install)\ncp -r [YOUR_OPTEE_DIR]/optee_rust/out/* shared_folder/\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Run QEMU:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"(cd $OPTEE_DIR/build && make run-only QEMU_VIRTFS_ENABLE=y\nQEMU_VIRTFS_HOST_DIR=$(pwd)/shared_folder)\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"After the QEMU has been booted, you need to mount the shared folder in the\nQEMU guest system (username: root), in order to access the compiled CA/TA from\nQEMU. Run the command as follows in the QEMU guest terminal:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"mkdir shared && mount -t 9p -o trans=virtio host shared\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:["Then run CA and TA as ",(0,i.jsx)(n.a,{href:"https://optee.readthedocs.io/en/latest/building/optee_with_rust.html",children:"this\ndocumentation"}),"\ndescribes."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"run-rust-applications-on-other-platforms",children:"Run Rust Applications on Other Platforms"}),"\n",(0,i.jsx)(n.p,{children:"Copy the applications to your platform and run."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);