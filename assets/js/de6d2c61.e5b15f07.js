"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[8658],{1184:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>r});var i=n(4041);const t={},o=i.createContext(t);function d(e){const s=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(o.Provider,{value:s},e.children)}},8028:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"teaclave-sgx-sdk/documents/developing-with-vscode","title":"Developing with Visual Studio Code","description":"Overview","source":"@site/docs/teaclave-sgx-sdk/documents/developing-with-vscode.md","sourceDirName":"teaclave-sgx-sdk/documents","slug":"/sgx-sdk-docs/developing-with-vscode","permalink":"/sgx-sdk-docs/developing-with-vscode","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/sgx-sdk-docs/developing-with-vscode","slug":"/sgx-sdk-docs/developing-with-vscode"},"sidebar":"teaclave-sgx-sdk_sidebar","previous":{"title":"`is_x86_feature_detected` in Teaclave SGX SDK","permalink":"/sgx-sdk-docs/is_x86_feature_detected-in-sgx-sdk"},"next":{"title":"Debugging a Local Enclave in Docker","permalink":"/sgx-sdk-docs/debugging-a-local-rust-sgx-enclave"}}');var t=n(1085),o=n(1184);const d={permalink:"/sgx-sdk-docs/developing-with-vscode",slug:"/sgx-sdk-docs/developing-with-vscode"},r="Developing with Visual Studio Code",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Known bugs",id:"known-bugs",level:2},{value:"Steps",id:"steps",level:2},{value:"Setup the vscode-ssh session.",id:"setup-the-vscode-ssh-session",level:3},{value:"Create an rls-friendly Teaclave SGX SDK project.",id:"create-an-rls-friendly-teaclave-sgx-sdk-project",level:3},{value:"Setup Native Debug with sgx-gdb",id:"setup-native-debug-with-sgx-gdb",level:3}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"developing-with-visual-studio-code",children:"Developing with Visual Studio Code"})}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["Use Visual Studio Code and the ",(0,t.jsx)(s.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh",children:"Remote - SSH"})," plugin to establish a vscode-ssh session."]}),"\n",(0,t.jsxs)(s.li,{children:["Tweak a project with a new ",(0,t.jsx)(s.code,{children:"Cargo.toml"})," workspace and all ",(0,t.jsx)(s.code,{children:"Makefile"}),"s. This enables ",(0,t.jsx)(s.code,{children:"rls"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"Tweak the build options for compiling in debug mode."}),"\n",(0,t.jsxs)(s.li,{children:["Use ",(0,t.jsx)(s.a,{href:"https://marketplace.visualstudio.com/items?itemName=webfreak.debug",children:"Native Debug"})," plugin for graphic debugging."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Visual Studio Code installed on your machine. OS is flexible."}),"\n",(0,t.jsx)(s.li,{children:"Remote Linux supports Intel SGX, with SSH service started."}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"rustup"}),", Intel SGX driver/PSW/SDKs are correctly installed. ",(0,t.jsx)(s.code,{children:"hello-rust"})," code sample works."]}),"\n",(0,t.jsxs)(s.li,{children:["Remote Linux ",(0,t.jsx)(s.strong,{children:"could"})," be the same machine. Just ignore the ",(0,t.jsx)(s.code,{children:"vscode-ssh"})," plugin mentioned in this wiki page and you'll be fine."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"known-bugs",children:"Known bugs"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sgx-gdb"})," throws Python exception on ",(0,t.jsx)(s.code,{children:"gdb"})," > 7.12 on some platforms, such as\nmine. But native sgx-gdb may not throw that error. Don't have a solution for\nVSCode yet."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"steps",children:"Steps"}),"\n",(0,t.jsx)(s.h3,{id:"setup-the-vscode-ssh-session",children:"Setup the vscode-ssh session."}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["Setup a convenient way for ssh login. I always append my ",(0,t.jsx)(s.code,{children:"~/.ssh/id_rsa.pub"})," to the remote ",(0,t.jsx)(s.code,{children:"~/.ssh/authorized_keys"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Install the ",(0,t.jsx)(s.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh",children:"Remote - SSH"})," plugin."]}),"\n",(0,t.jsx)(s.li,{children:"Establish a vscode-ssh session to the remote Linux."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"create-an-rls-friendly-teaclave-sgx-sdk-project",children:"Create an rls-friendly Teaclave SGX SDK project."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"https://github.com/apacher/incubator-teaclave-sgx-sdk/tree/master/samplecode/hello-rust-vscode-debug",children:"hello-rust-vscode-debug"}),"\nis an example. Differences between this and ",(0,t.jsx)(s.code,{children:"hello-rust"})," are:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["An extra ",(0,t.jsx)(s.code,{children:"Cargo.toml"})," at the root, which contains two Rust crates: ",(0,t.jsx)(s.code,{children:"app"})," and ",(0,t.jsx)(s.code,{children:"enclave"}),". This change would result in changing the path of ",(0,t.jsx)(s.code,{children:"target"})," folders."]}),"\n",(0,t.jsxs)(s.li,{children:["Tweak ",(0,t.jsx)(s.code,{children:"Makefile"})," and ",(0,t.jsx)(s.code,{children:"enclave/Makefile"})," and correct the path of ",(0,t.jsx)(s.code,{children:"target"})," folders."]}),"\n",(0,t.jsxs)(s.li,{children:["Tweak ",(0,t.jsx)(s.code,{children:"Makefile"})," and ",(0,t.jsx)(s.code,{children:"enclave/Makefile"})," to enable debug compilation. Changes\ninclude: (1) remove ",(0,t.jsx)(s.code,{children:"--release"})," in ",(0,t.jsx)(s.code,{children:"cargo build"}),", (2) add ",(0,t.jsx)(s.code,{children:"-ggdb"})," to\n",(0,t.jsx)(s.code,{children:"SGX_COMMON_FLAGS"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["After these steps, the ",(0,t.jsx)(s.code,{children:"hello-rust-vscode-debug"}),' should be an rls-friendly\nproject. And open the remote folder of it in the VSCode main screen "Start -\nopen folder". Then autocompletion should work!']}),"\n",(0,t.jsx)(s.h3,{id:"setup-native-debug-with-sgx-gdb",children:"Setup Native Debug with sgx-gdb"}),"\n",(0,t.jsxs)(s.p,{children:["Now we have a vscode-ssh session to the remote Linux and an opened folder of\n",(0,t.jsx)(s.code,{children:"hello-rust-vscode-debug"}),". The next step is to configure a correct ",(0,t.jsx)(s.code,{children:"launch.json"}),"\nfor Native Debug plugin. Now open the debug panel of VS code and click on the\ngear icon to open ",(0,t.jsx)(s.code,{children:"launch.json"})," in the editor."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Debug",\n            "type": "gdb",\n            "request": "launch",\n            "target": "app",\n            "cwd": "${workspaceRoot}/bin",\n            "valuesFormatting": "parseText",\n            "gdbpath": "sgx-gdb",\n            "ssh": {\n                "forwardX11": false,\n                "host": "xxx", // your IP\n                "cwd": "${workspaceRoot}/bin",\n                 // SSH private key on remote machine. Add the pub key to ~/.ssh/authorized_keys\n                 // This ssh configuration is established from host to host, because the current\n                 // vscode session is "within a ssh session established by vscode-ssh".\n                 // I think this might be a bug but can hardly be resolved.\n                "keyfile": "/home/ding/.ssh/id_rsa", // private key\n                "user": "xxx",\n                "bootstrap": "source /opt/sgxsdk/environment",\n                "port": 22\n            }\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"name"}),",",(0,t.jsx)(s.code,{children:"type"}),",",(0,t.jsx)(s.code,{children:"request"}),",",(0,t.jsx)(s.code,{children:"valuesFormatting"})," are default values.\n",(0,t.jsx)(s.code,{children:"cwd"})," is the working directory we launch the app, so it should be the ",(0,t.jsx)(s.code,{children:"bin"}),"\nfolder. ",(0,t.jsx)(s.code,{children:"target"})," is the debugee executable so it should be the ",(0,t.jsx)(s.code,{children:"app"}),". ",(0,t.jsx)(s.code,{children:"host"})," is\nthe IP address of your Linux machine. Then comes the tricky part: ssh. It means\nthat we use an extra ssh session for debugger, within the current vscode-ssh\nsession. This means that we are here creating an additional ssh session from\nremote machine to itself. Only in this way could we setup the environment using\nthe Intel's script before launching ",(0,t.jsx)(s.code,{children:"sgx-gdb"}),". So we need to add the public key\n",(0,t.jsx)(s.code,{children:"~/.ssh/id_rsa"})," to ",(0,t.jsx)(s.code,{children:"~/.ssh/authorized_keys"})," and demonstrate the corresponding\nprivate key as ",(0,t.jsx)(s.code,{children:"~/.ssh/id_rsa"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Having this ",(0,t.jsx)(s.code,{children:"launch.json"})," configured correctly, we could simply set up a\nbreakpoint on the first line of ",(0,t.jsx)(s.code,{children:"say_something"})," and start debugging. Enjoy!"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);