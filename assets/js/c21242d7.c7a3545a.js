"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[1652],{1184:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>s});var t=i(4041);const o={},a=t.createContext(o);function c(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(a.Provider,{value:n},e.children)}},1943:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"teaclave/config/README","title":"Configurations in Teaclave","description":"This Teaclave Config describes all sorts of configurations in the platform. All","source":"@site/docs/teaclave/config/README.md","sourceDirName":"teaclave/config","slug":"/docs/codebase/config","permalink":"/docs/codebase/config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/config","slug":"/docs/codebase/config"},"sidebar":"teaclave_sidebar","previous":{"title":"Common Libraries","permalink":"/docs/codebase/common"},"next":{"title":"Crypto Primitives","permalink":"/docs/codebase/crypto"}}');var o=i(1085),a=i(1184);const c={permalink:"/docs/codebase/config",slug:"/docs/codebase/config"},s="Configurations in Teaclave",r={},l=[{value:"Build Config",id:"build-config",level:2},{value:"Runtime Config",id:"runtime-config",level:2},{value:"Keys and Certificates in Teaclave",id:"keys-and-certificates-in-teaclave",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"configurations-in-teaclave",children:"Configurations in Teaclave"})}),"\n",(0,o.jsxs)(n.p,{children:["This Teaclave Config describes all sorts of configurations in the platform. All\nconfigurations are defined in the TOML file format. Basically, there are two types\nof configurations in Teaclave: ",(0,o.jsx)(n.em,{children:"build config"})," and ",(0,o.jsx)(n.em,{children:"runtime config"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"build-config",children:"Build Config"}),"\n",(0,o.jsxs)(n.p,{children:["The build config defines configurations which are provided at compilation time.\nThat is, this type of configurations will be compiled as the part of the\nTeaclave platform and are hard-coded in the services. For example, the root CA\ncertificate of attestation service used for verifying attestation report,\nauditors' public keys for verification of enclave information, and topological\ngraph of connections between services for mutual attestation. More detailed\nexplanation of configurations can be seen in the\n",(0,o.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/blob/master/config/build.config.toml",children:(0,o.jsx)(n.code,{children:"build.config.toml"})}),"\nfile. We also implement a\n",(0,o.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/tree/master/config/config_gen",children:(0,o.jsx)(n.code,{children:"config_gen"})}),"\ntool to generate hard-coded configurations in Rust\nfrom the user-defined config in TOML at compilation time."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that it is very ",(0,o.jsx)(n.em,{children:"important"})," to define these configurations in build time,\nbecause they are part of Teaclave's ",(0,o.jsx)(n.em,{children:"trusted computing base"})," (TCB) and will be\n",(0,o.jsx)(n.em,{children:"remotely attested"}),". In Teaclave's ",(0,o.jsx)(n.a,{href:"/docs/threat-model",children:"threat model"}),",\noperating system could be compromised. If this configurations is not in TCB\n(i.e., cannot be remotely attested), the security and integrity of the platform\nmay be affected."]}),"\n",(0,o.jsx)(n.h2,{id:"runtime-config",children:"Runtime Config"}),"\n",(0,o.jsxs)(n.p,{children:["The runtime config defines some configurations which will be used at execution\nruntime. It includes listening and advertised addresses of service endpoints in\nTeaclave, the enclave information and auditor's signatures files loaded at\nruntime, algorithm/id/key used for connecting attestation services, etc.\nSome configurations can be overridden by environment variables. Detailed\nexplanation of configurations can be found in the\n",(0,o.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/blob/master/config/runtime.config.toml",children:(0,o.jsx)(n.code,{children:"runtime.config.toml"})})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that the runtime config will be loaded when launching the services. We\n",(0,o.jsx)(n.em,{children:"should not"})," trust the content and make sure maliciously crafted config from\nthis file will not break any data confidentiality/integrity. Otherwise, the\nconfiguration must be defined as a build config."]}),"\n",(0,o.jsx)(n.h2,{id:"keys-and-certificates-in-teaclave",children:"Keys and Certificates in Teaclave"}),"\n",(0,o.jsxs)(n.p,{children:["Directory ",(0,o.jsx)(n.code,{children:"keys"})," contains keys and certificates used in the Teaclave platform.\nNote that these are only for demonstration. ",(0,o.jsx)(n.em,{children:"DO NOT use them in production."})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"enclave_signing_key.pem"}),": private key to sign SGX enclaves"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ias_root_ca_cert.pem"}),": attestation report root CA certificate for Intel SGX\nAttestation Service, obtained from the\n",(0,o.jsx)(n.a,{href:"https://api.portal.trustedservices.intel.com/EPID-attestation",children:"service website"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dcap_root_ca_cert.pem"}),": root CA certificate used for connecting to the\nreference DCAP attestation server and verifying ECDSA attestation reports."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dcap_server_cert.pem"})," and ",(0,o.jsx)(n.code,{children:"dcap_server_key.pem"}),": DCAP attestation server\nend-entity certificate and private key. Certificate is signed by DCAP root CA."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"auditors"}),": contains auditors' keys to sign the ",(0,o.jsx)(n.em,{children:"enclave info"})," for mutual\nattestation"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);