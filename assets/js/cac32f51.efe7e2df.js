"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[787],{1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(4041);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},2207:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"teaclave/docs/inference-with-tvm","title":"Inference Task with TVM in Teaclave","description":"Inference and model training are two important topics in machine learning.","source":"@site/docs/teaclave/docs/inference-with-tvm.md","sourceDirName":"teaclave/docs","slug":"/docs/inference-with-tvm","permalink":"/docs/inference-with-tvm","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/inference-with-tvm","slug":"/docs/inference-with-tvm"},"sidebar":"teaclave_sidebar","previous":{"title":"Executing WebAssembly in Teaclave","permalink":"/docs/executing-wasm"},"next":{"title":"Access Control in Teaclave","permalink":"/docs/access-control"}}');var i=t(1085),s=t(1184);const r={permalink:"/docs/inference-with-tvm",slug:"/docs/inference-with-tvm"},c="Inference Task with TVM in Teaclave",l={},o=[{value:"Preparing TVM and Dependencies",id:"preparing-tvm-and-dependencies",level:2},{value:"Compiling WASM Library",id:"compiling-wasm-library",level:2},{value:"Bridging with Teaclave",id:"bridging-with-teaclave",level:2},{value:"Execute the function",id:"execute-the-function",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"inference-task-with-tvm-in-teaclave",children:"Inference Task with TVM in Teaclave"})}),"\n",(0,i.jsxs)(n.p,{children:["Inference and model training are two important topics in machine learning.\nThanks to ",(0,i.jsx)(n.a,{href:"https://tvm.apache.org/",children:"TVM"})," and ",(0,i.jsx)(n.a,{href:"https://teaclave.apache.org/docs/executing-wasm/",children:"WebAssembly\nExecutor"}),", Teaclave is now\nable to run the former\u2014inference tasks. TVM can convert a model (or computation\ngraph) to an intermediate representation (IR) defined by TVM, and compile the\nbinary of this model from the IR. Since TVM recruits LLVM to emit binary code\nand LLVM support WebAssembly as backend, Teaclave's WebAssembly Executor can\nthen execute the model's binary with additional lightweight runtime provided by\nTVM."]}),"\n",(0,i.jsxs)(n.p,{children:["Although TVM has already provided an ",(0,i.jsx)(n.a,{href:"https://github.com/apache/tvm/tree/main/apps/wasm-standalone",children:"wasm-standalone example\napp"}),", we still\ncannot copy and run it in Teaclave due to lack of WASI support and specific\ncontext file interface. This document mainly focuses on the ",(0,i.jsx)(n.em,{children:"what's different"}),"\nin Teaclave and we will finally build a MNIST inference function for Teaclave."]}),"\n",(0,i.jsx)(n.h2,{id:"preparing-tvm-and-dependencies",children:"Preparing TVM and Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["All the dependencies has been installed or built in our docker image. If you do\nnot want to waste time on this step, you can skip this section with ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/layers/teaclave/teaclave-build-ubuntu-1804-sgx-2.17.1/0.1.0/images/sha256-fd6c0e8a0bac53327408091ac8e11f911711477747116ecb4f3bf1094fb24c17",children:"our\nimage"}),"\nprepared."]}),"\n",(0,i.jsxs)(n.p,{children:["TVM provides detailed build instruction in ",(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/install/from_source.html",children:"the\ndocument"}),". Besides the\ndependencies listed on their website, we also need to install (e.g. on Ubuntu\n18.04) these packages to build the example."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"sudo apt install protobuf-compiler libprotoc-dev llvm-10 clang-10\npip3 install onnx==1.9.0 numpy decorator attrs spicy\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["**NOTE ** ",(0,i.jsx)(n.br,{}),"\nAt the time of writing this document, latest ",(0,i.jsx)(n.code,{children:"onnx"})," cannot work\nbecause it depends on a higher version ",(0,i.jsx)(n.code,{children:"protobuf"}),", which is not provided by\nUbuntu 18.04. We tested TVM with commit hash\n",(0,i.jsx)(n.code,{children:"df06c5848f59108a8e6e7dffb997b4b659b573a7"}),". Later versions may work, but commits\nolder than this one hardly work."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"compiling-wasm-library",children:"Compiling WASM Library"}),"\n",(0,i.jsx)(n.p,{children:"TVM offers a set of Python APIs for downloading, building, and testing the\nmodel. Specifically, to compile a graph into binary, we need to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Download the model"}),"\n",(0,i.jsx)(n.li,{children:"Determine the name and shape of input"}),"\n",(0,i.jsx)(n.li,{children:"Generate TVM IR module"}),"\n",(0,i.jsx)(n.li,{children:"Compile(build) to LLVM WebAssembly target"}),"\n",(0,i.jsx)(n.li,{children:"Save the object, graph, and param files"}),"\n",(0,i.jsxs)(n.li,{children:["Archive the object(",(0,i.jsx)(n.code,{children:"llvm-ar"}),") to a static library"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["After completing these steps, we will generate a static library with the\n",(0,i.jsx)(n.code,{children:"PackedFunc"})," exported for inference task."]}),"\n",(0,i.jsxs)(n.p,{children:["The complete example build script can be found\n",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/blob/master/examples/python/wasm_tvm_mnist_payload/build_lib.py",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"bridging-with-teaclave",children:"Bridging with Teaclave"}),"\n",(0,i.jsx)(n.p,{children:"Although the library is in WebAssembly, we can not use it directly in Teaclave\nbecause it lacks parameters, and the interfaces is also not compatible with\nTeaclave. So we need a wrapper program which contains a small runtime for the\ncompiled computation graph. This wrapper should:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load model parameters and graph json"}),"\n",(0,i.jsx)(n.li,{children:"Link with the graph library generated in the previous section"}),"\n",(0,i.jsx)(n.li,{children:"Export an entrypoint which is compatible with the Teaclave's interface"}),"\n",(0,i.jsx)(n.li,{children:"Read input data(image) using Teaclave's API and convert it to tensor"}),"\n",(0,i.jsx)(n.li,{children:"Call the graph function and get the result back"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Our wrapper is dependent on TVM's Rust APIs. We use ",(0,i.jsx)(n.code,{children:"GraphExecutor"})," to achieve\ncalling to the graph library. Detailed mechanisms are explained in ",(0,i.jsx)(n.a,{href:"https://github.com/apache/tvm/tree/main/apps/wasm-standalone",children:"TVM's\nexample"}),". our\nexample can be found\n",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/tree/master/examples/python/wasm_tvm_mnist_payload",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["**NOTE ** ",(0,i.jsx)(n.br,{}),"\nTo compile a Teaclave-compatible WASM binary, please make sure your\nRust version > 1.53. We tested on 1.54 stable."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"execute-the-function",children:"Execute the function"}),"\n",(0,i.jsxs)(n.p,{children:["Just like any other Teaclave function, users need to prepare a simple Python\nscript to pass the function and data to Teaclave, and then get the result back.\nThe script of this example is\n",(0,i.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/blob/master/examples/python/wasm_tvm_mnist.py",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"})," ",(0,i.jsx)(n.br,{}),"\nTo compile a Teaclave-compatible WASM binary, please make sure your\nRust version > 1.53. We tested on 1.54 stable."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);