"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[5607],{2198:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"teaclave-faas-legacy/docs/access-control","title":"Access Control in Teaclave","description":"Access control in multi-party computation, by its nature, is set-centric. Unlike","source":"@site/docs/teaclave-faas-legacy/docs/access-control.md","sourceDirName":"teaclave-faas-legacy/docs","slug":"/docs/access-control","permalink":"/docs/access-control","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/access-control","slug":"/docs/access-control"},"sidebar":"teaclave-faas-legacy_sidebar","previous":{"title":"Inference Task with TVM in Teaclave","permalink":"/docs/inference-with-tvm"},"next":{"title":"Build System","permalink":"/docs/build-system"}}');var t=s(4848),c=s(8453);const r={permalink:"/docs/access-control",slug:"/docs/access-control"},i="Access Control in Teaclave",o={},d=[{value:"Model",id:"model",level:2},{value:"request",id:"request",level:3},{value:"term",id:"term",level:3},{value:"matcher",id:"matcher",level:3},{value:"Implementation",id:"implementation",level:2}];function l(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"access-control-in-teaclave",children:"Access Control in Teaclave"})}),"\n",(0,t.jsx)(a.p,{children:"Access control in multi-party computation, by its nature, is set-centric. Unlike\nin traditional settings where only one entity, group, or role is involved in an\naction, in multi-party computation tasks an access is approved or denied by\ncombining the decisions of all stakeholders. Ownership is also set-like, because\nthe result of a joint computation task very likely belongs to all parties that\nhave provided data."}),"\n",(0,t.jsx)(a.p,{children:"We found that access control models in conventional systems like RBAC and ABAC\nare not powerful enough to govern data usages in Teaclave. Therefore, we\ninvented our own access control model and mechanism."}),"\n",(0,t.jsx)(a.h2,{id:"model",children:"Model"}),"\n",(0,t.jsxs)(a.p,{children:["The access control model of Teaclave is configured through the file\n",(0,t.jsx)(a.a,{href:"https://github.com/apache/incubator-teaclave/blob/master/services/access_control/model.conf",children:"model.conf"}),".\nThe file has three sections:"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"requests"}),"\n",(0,t.jsx)(a.li,{children:"terms"}),"\n",(0,t.jsx)(a.li,{children:"matchers"}),"\n"]}),"\n",(0,t.jsxs)(a.p,{children:["Before diving into the details about how our access control model works, we\nrecommend readers learn about ",(0,t.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Logic_programming",children:"logic programming"}),"\nfirst, because our\nmodel configuration language is actually a home-baked tiny logic programming\nlanguage."]}),"\n",(0,t.jsx)(a.h3,{id:"request",children:"request"}),"\n",(0,t.jsx)(a.p,{children:'A request is a query that should be answered by the access control service. The\nresponse is either "approved" or "denied." A request is defined as a tuple of\nany arity. For example,'}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{children:"[requests]\ntask_access_data = task, data\n"})}),"\n",(0,t.jsxs)(a.p,{children:["defines a request called ",(0,t.jsx)(a.code,{children:"task_access_data"})," which contains two fields named\n",(0,t.jsx)(a.code,{children:"task"})," and ",(0,t.jsx)(a.code,{children:"data"}),". This request can mean a task with the id ",(0,t.jsx)(a.code,{children:"task"})," wants to\naccess a piece of data hosted by Teaclave whose id is ",(0,t.jsx)(a.code,{children:"data"}),"."]}),"\n",(0,t.jsx)(a.h3,{id:"term",children:"term"}),"\n",(0,t.jsx)(a.p,{children:"Terms are relations over certain domains. Each term can be viewed as a table\nstoring facts about the entities revelant to the access control logic. For\nexample,"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{children:"[terms]\ndata_owner = data, usr\ntask_participant = task, usr\n"})}),"\n",(0,t.jsxs)(a.p,{children:["For the ",(0,t.jsx)(a.code,{children:"task_access_data"})," request, there are three relevant domains: ",(0,t.jsx)(a.code,{children:"data"}),",\n",(0,t.jsx)(a.code,{children:"usr"}),", and ",(0,t.jsx)(a.code,{children:"task"}),". Furthermore, two relations are required by Teaclave to make\na decision, which are"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"data_owner"})," relation over (",(0,t.jsx)(a.code,{children:"data"})," X ",(0,t.jsx)(a.code,{children:"usr"}),"), denoting which user owns\na piece of data."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"task_participant"})," relation over (",(0,t.jsx)(a.code,{children:"task"})," X ",(0,t.jsx)(a.code,{children:"usr"}),"), denoting which\nusers are the participants of a joint computation task."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"An instance of the database describing the two terms could be"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{children:"data_owner data_1, usr_1\ndata_owner data_2, usr_1\ndata_owner data_2, usr_2\n\ntask_participant task_1 usr_1\ntask_participant task_1 usr_2\n"})}),"\n",(0,t.jsxs)(a.p,{children:["The facts stored in this database instance indicate that ",(0,t.jsx)(a.code,{children:"data_1"})," is owned\nexclusively by ",(0,t.jsx)(a.code,{children:"usr_1"}),", while ",(0,t.jsx)(a.code,{children:"data_2"})," is owned by ",(0,t.jsx)(a.code,{children:"usr_1"})," and ",(0,t.jsx)(a.code,{children:"usr_2"}),"\ntogether. The facts also indicates that ",(0,t.jsx)(a.code,{children:"task_1"})," has two participants, i.e.,\n",(0,t.jsx)(a.code,{children:"usr_1"})," and ",(0,t.jsx)(a.code,{children:"usr_2"}),"."]}),"\n",(0,t.jsx)(a.h3,{id:"matcher",children:"matcher"}),"\n",(0,t.jsxs)(a.p,{children:["The core logic used by Teaclave to resolve a request is defined as a matcher.\nWe define the matcher for ",(0,t.jsx)(a.code,{children:"task_access_data"})," request as the following"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{children:"[matcher]\ntask_access_data = data_owner(task_access_data.data, _) <= task_participant(task_access_data.task, _)\n"})}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.code,{children:"data_owner(task_access_data.data, _)"})," and\n",(0,t.jsx)(a.code,{children:"task_participant(task_access_data.task, _)"})," are term queries. The return value\nof ",(0,t.jsx)(a.code,{children:"data_owner(task_access_data.data, _)"})," is a subset of the ",(0,t.jsx)(a.code,{children:"usr"})," domain,\nwhere each value ",(0,t.jsx)(a.code,{children:"u"})," in the fact meets the condition that"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{children:"data_owner task_access_data.data u\n"})}),"\n",(0,t.jsxs)(a.p,{children:["is in the terms database. ",(0,t.jsx)(a.code,{children:"_"})," is called the query wild card and ",(0,t.jsx)(a.code,{children:"<="})," is the\nsubset operator. Therefore, the matcher basically means that, ",(0,t.jsxs)(a.em,{children:["the request for\n",(0,t.jsx)(a.code,{children:"task"})," to access ",(0,t.jsx)(a.code,{children:"data"})," is approved only if all owners of ",(0,t.jsx)(a.code,{children:"data"})," are have\narticipated in ",(0,t.jsx)(a.code,{children:"task"})]}),"."]}),"\n",(0,t.jsx)(a.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(a.p,{children:"The access control module of Teaclave is implemented as a standalone service.\nOther components should send RPC requests to the service and get access control\ndecisions as RPC responses."}),"\n",(0,t.jsx)(a.p,{children:"The model configuration parser and request resolution engine are written in\nPython, powered by MesaPy. The access control service of Teaclave is a nice\nshowcase of what MesaPy is capable of."}),"\n",(0,t.jsx)(a.p,{children:"The implementation is purely experimental at this point. The performance is not\noptimized and the engine is likely not robust enough to avoid crashes while\ndealing with badly shaped requests. Contributions are welcome!"})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>r,x:()=>i});var n=s(6540);const t={},c=n.createContext(t);function r(e){const a=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);