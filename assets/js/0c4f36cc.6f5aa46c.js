"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[3119],{1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(4041);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},2766:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/mesapy_logistic_reg_payload-ddd2cec56d45e67f04013ee7114d711f.py"},3945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"teaclave/docs/my-first-function","title":"My First Function","description":"This documentation will guide you through executing your first function on the","source":"@site/docs/teaclave/docs/my-first-function.md","sourceDirName":"teaclave/docs","slug":"/docs/my-first-function","permalink":"/docs/my-first-function","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/docs/my-first-function","slug":"/docs/my-first-function"},"sidebar":"teaclave_sidebar","next":{"title":"Function in Python","permalink":"/docs/functions-in-python"}}');var s=t(1085),r=t(1184);const o={permalink:"/docs/my-first-function",slug:"/docs/my-first-function"},a="My First Function",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Clone and Build Teaclave",id:"clone-and-build-teaclave",level:2},{value:"Setup Attestation Service",id:"setup-attestation-service",level:2},{value:"Launch Teaclave Services",id:"launch-teaclave-services",level:2},{value:"Invoke Function",id:"invoke-function",level:2},{value:"Built-in function",id:"built-in-function",level:3},{value:"Define my own function",id:"define-my-own-function",level:3},{value:"Simulation Mode",id:"simulation-mode",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"my-first-function",children:"My First Function"})}),"\n",(0,s.jsx)(n.p,{children:"This documentation will guide you through executing your first function on the\nTeaclave platform."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["To run Teaclave, a hardware with Intel SGX support is needed. You can\ncheck with this list of ",(0,s.jsx)(n.a,{href:"https://github.com/ayeks/SGX-hardware",children:"supported hardware"}),".\nNote that you sometimes need to configure BIOS to enable SGX. Additionally, you\nneed to install driver and platform software to run SGX applications. If you are\nusing Azure confidential computing VM, please refer to ",(0,s.jsx)(n.a,{href:"/docs/azure-confidential-computing/",children:"this document"}),".\nOtherwise, let install SGX driver first."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ wget https://download.01.org/intel-sgx/sgx-linux/2.11/distro/ubuntu18.04-server/sgx_linux_x64_driver_2.6.0_b0a445b.bin\n$ sudo ./sgx_linux_x64_driver_2.6.0_b0a445b.bin\n$ ls /dev/isgx    # Make sure you have the SGX device\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, install SGX architectural enclaves and quoting libraries for attestation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ sudo apt-get install libssl-dev libcurl4-openssl-dev libprotobuf-dev\n$ echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/intel-sgx.list\n$ wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add -\n$ sudo apt-get update && \\\n   sudo apt-get install libsgx-launch libsgx-urts libsgx-epid libsgx-urts libsgx-quote-ex  libsgx-aesm-quote-ex-plugin libsgx-aesm-epid-plugin\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, you can learn from\n",(0,s.jsx)(n.a,{href:"https://download.01.org/intel-sgx/sgx-linux/2.9/docs/Intel_SGX_Installation_Guide_Linux_2.9_Open_Source.pdf",children:"Intel SGX Installation Guide"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Docker and Docker Compose are also needed for building and trying Teaclave."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo add-apt-repository \\\n   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable"\n$ sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io\n$ sudo usermod -aG docker your-user-name\n$ sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you don't have an SGX supported hardware at hand, Teaclave can also run in\nsimulation mode. However some functions like remote attestation will be disabled\nin this mode. Please start from ",(0,s.jsx)(n.a,{href:"#simulation-mode",children:"here"})," if you plan to try in\nsimulation mode."]}),"\n",(0,s.jsx)(n.h2,{id:"clone-and-build-teaclave",children:"Clone and Build Teaclave"}),"\n",(0,s.jsx)(n.p,{children:"Clone the Teaclave repository:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ git clone https://github.com/apache/incubator-teaclave.git\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Since the building dependencies are a bit complicated, we suggest to build the\nTeaclave platform with our docker images. You can learn more details about the\nbuilding environment from ",(0,s.jsx)(n.code,{children:"Dockerfile"})," under the ",(0,s.jsx)(n.a,{href:"../docker",children:(0,s.jsx)(n.code,{children:"docker"})}),"\ndirectory."]}),"\n",(0,s.jsx)(n.p,{children:"Build the Teaclave platform using docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.17.1:0.2.0 \\\n   bash -c ". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON .. && \\\n     make -j"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"setup-attestation-service",children:"Setup Attestation Service"}),"\n",(0,s.jsxs)(n.p,{children:["For simplicity, we use Intel Attestation Service (IAS) in this tutorial. To get\nstarted, you need to enroll in Intel SGX Attestation Service in\nIntel's ",(0,s.jsx)(n.a,{href:"https://api.portal.trustedservices.intel.com/EPID-attestation",children:"attestation service portal"}),'\nby subscribing the attestation service for development (linkable is preferred).\nThen, you can find "SPID" and "Primary key" in the subscription details for\nlater usage.']}),"\n",(0,s.jsxs)(n.p,{children:["There is one more setup if you are using linkable attestation service subscription.\nEdit the ",(0,s.jsx)(n.code,{children:"/etc/aesmd.conf"})," file and uncomment\nthe ",(0,s.jsx)(n.code,{children:"default quoting type = epid_linkable"})," line to enable linkable quotes for EPID-based attestation service\n(i.e., Intel Attestation Service). At last, the AESM service needs to be restarted by\n",(0,s.jsx)(n.code,{children:"sudo systemctl restart aesmd"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ sudo sed -i '/^#default quoting type = epid_linkable/s/^#//' /etc/aesmd.conf\n$ sudo service aesmd restart\n"})}),"\n",(0,s.jsx)(n.h2,{id:"launch-teaclave-services",children:"Launch Teaclave Services"}),"\n",(0,s.jsxs)(n.p,{children:["Teaclave contains multiple services. To ease the deployment, you can use\n",(0,s.jsx)(n.a,{href:"https://docs.docker.com/compose/",children:"docker-compose"})," to manage all services in a\ncontainerized environment."]}),"\n",(0,s.jsx)(n.p,{children:"Setup environment variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ export AS_SPID="00000000000000000000000000000000"  # SPID from IAS subscription\n$ export AS_KEY="00000000000000000000000000000000"   # Primary key/Secondary key from IAS subscription\n$ export AS_ALGO="sgx_epid"                          # Attestation algorithm, sgx_epid for IAS\n$ export AS_URL="https://api.trustedservices.intel.com:443"    # IAS URL\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Launch all services with ",(0,s.jsx)(n.code,{children:"docker-compose"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ (cd docker && ./run-teaclave-services.sh)\nStarting teaclave-authentication-service ... done\nStarting teaclave-access-control-service ... done\nStarting teaclave-scheduler-service      ... done\nStarting teaclave-management-service     ... done\nStarting teaclave-execution-service      ... done\nStarting teaclave-frontend-service       ... done\nAttaching to ...\n"})}),"\n",(0,s.jsx)(n.h2,{id:"invoke-function",children:"Invoke Function"}),"\n",(0,s.jsxs)(n.p,{children:["We provide several examples to demonstrate the platform. Let's get started with\ninvoking a built-in function: ordered-set-intersect, which is a function that\ntakes two ordered sets and returns the intersection set in the output files.\nThis function is a kind of\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Private_set_intersection",children:"PSI"})," implementation\nbased on TEE."]}),"\n",(0,s.jsxs)(n.p,{children:["This example is written in Python, and some dependencies are needed for the\nremote attestation. They can be installed with ",(0,s.jsx)(n.code,{children:"pip"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ pip3 install pyopenssl toml cryptography grpcio grpcio-tools grpclib\n"})}),"\n",(0,s.jsx)(n.h3,{id:"built-in-function",children:"Built-in function"}),"\n",(0,s.jsx)(n.p,{children:"Then, run the PSI example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_ordered_set_intersect.py \n[+] user0 login\n[+] user1 login\n[+] user0 registering function\n[+] user0 creating task\n[+] user0 registering input file\n[+] user0 registering output file\n[+] user0 assigning data to task\n[+] user1 registering input file\n[+] user1 registering output file\n[+] user1 assigning data to task\n[+] user0 approving task\n[+] user1 approving task\n[+] user0 invoking task\n[+] user0 getting task result\n[+] user1 getting task result\n[+] User 0 result: 3 common items\n[+] User 1 result: 3 common items\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you see above log, this means that the function is successfully invoked in\nTeaclave. The intersection set is stored in the output files that the users registered."}),"\n",(0,s.jsx)(n.h3,{id:"define-my-own-function",children:"Define my own function"}),"\n",(0,s.jsxs)(n.p,{children:["The previous example is to demonstrate invoking the built-in PSI function. In\nTeaclave, you can also register and invoke a function written by yourself. For\nexample, we have implemented a ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Logistic_regression",children:"logistic\nregression"})," function in\nPython in\n",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(2766).A+"",children:"mesapy_logistic_reg_payload.py"}),".\nIt can conduct both training and prediction."]}),"\n",(0,s.jsx)(n.p,{children:"Then run the mesapy LR example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ PYTHONPATH=../../sdk/python python3 mesapy_logistic_reg.py\n[+] mesapy_logistic_reg_train_task begin!\n[+] admin login\n[+] admin registering function\n[+] admin reading payload file\n[+] admin creating task\n[+] admin registering input file\n[+] admin registering output file\n[+] admin assigning data to task\n[+] admin invoking task\n[+] admin getting task result\n[+] User 0 result: Training is finished!\n[+] mesapy_logistic_reg_predict_task begin!\n[+] admin registering function\n[+] admin reading payload file\n[+] admin creating task\n[+] admin getting task output\n[+] admin getting task output\n[+] admin registering input file\n[+] admin registering output file\n[+] admin assigning data to task\n[+] admin invoking task\n[+] admin getting task result\n[+] Predict result: [1.0 1.0 0.0 0.0 0.0]\n[+] logistic_reg_task end!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"simulation-mode",children:"Simulation Mode"}),"\n",(0,s.jsxs)(n.p,{children:["Clone and build Teaclave (with the ",(0,s.jsx)(n.code,{children:"-DSGX_SIM_MODE=ON"})," option in ",(0,s.jsx)(n.code,{children:"cmake"}),").\nNote that if you are using Docker for Mac,\n",(0,s.jsx)(n.a,{href:"https://docs.docker.com/docker-for-mac/",children:"increase the size of allocated memory"}),' to\navoid compilation error caused by out-of-memory, e.g., reporting a "signal: 9,\nSIGKILL: kill" error during the compilation.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ git clone https://github.com/apache/incubator-teaclave.git\n$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.17.1:0.2.0 \\\n   bash -c ". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON -DSGX_SIM_MODE=ON .. && \\\n     make -j"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Since the attestation is disabled in the simulation mode, related environment\nvariables can be set to any values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ export AS_SPID="00000000000000000000000000000000"\n$ export AS_KEY="00000000000000000000000000000000"\n$ export AS_ALGO="sgx_epid"\n$ export AS_URL="https://api.trustedservices.intel.com:443"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["At last, launch all services with ",(0,s.jsx)(n.code,{children:"docker-compose"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ (cd docker && ./run-teaclave-services.sh -m sim)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In simulation mode, run the echo example with ",(0,s.jsx)(n.code,{children:"SGX_MODE=SW"})," environment variable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd examples/python\n$ SGX_MODE=SW PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);