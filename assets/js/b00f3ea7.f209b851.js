"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[4871],{4661:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"teaclave-faas-legacy/common/rusty_leveldb_sgx/README","title":"rusty-leveldb-sgx","description":"crates.io","source":"@site/docs/teaclave-faas-legacy/common/rusty_leveldb_sgx/README.md","sourceDirName":"teaclave-faas-legacy/common/rusty_leveldb_sgx","slug":"/teaclave-faas-legacy/common/rusty_leveldb_sgx/","permalink":"/teaclave-faas-legacy/common/rusty_leveldb_sgx/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var a=s(4848),l=s(8453);const o={slug:void 0},i="rusty-leveldb-sgx",r={},c=[{value:"Status",id:"status",level:2},{value:"Goals",id:"goals",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"rusty-leveldb-sgx",children:"rusty-leveldb-sgx"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://crates.io/crates/rusty-leveldb",children:(0,a.jsx)(t.img,{src:"https://img.shields.io/crates/v/rusty-leveldb.svg",alt:"crates.io"})})}),"\n",(0,a.jsx)(t.p,{children:"A fully compatible implementation of LevelDB in Rust. (any incompatibility is a\nbug!) Be able to run inside SGX."}),"\n",(0,a.jsx)(t.p,{children:"The implementation is very close to the original; often, you can see the same\nalgorithm translated 1:1, and class (struct) and method names are similar or\nthe same."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"NOTE: I do not endorse using this library for any data that you care about."}),"\nI do care, however, about bug reports."]}),"\n",(0,a.jsx)(t.h2,{id:"status",children:"Status"}),"\n",(0,a.jsx)(t.p,{children:"Working well, with a few rare bugs (see leveldb-rs issues)."}),"\n",(0,a.jsx)(t.h2,{id:"goals",children:"Goals"}),"\n",(0,a.jsx)(t.p,{children:"Some of the goals of this implementation are"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["As few copies of data as possible; most of the time, slices of bytes (",(0,a.jsx)(t.code,{children:"&[u8]"}),")\nare used. Owned memory is represented as ",(0,a.jsx)(t.code,{children:"Vec<u8>"})," (and then possibly borrowed\nas slice). Zero-copy is not always possible, though, and sometimes simplicity is favored."]}),"\n",(0,a.jsx)(t.li,{children:"Correctness -- self-checking implementation, good test coverage, etc. Just\nlike the original implementation."}),"\n",(0,a.jsx)(t.li,{children:"Clarity; commented code, clear structure (hopefully doing a better job than\nthe original implementation)."}),"\n",(0,a.jsx)(t.li,{children:"Coming close-ish to the original implementation; clarifying the translation of\ntypical C++ constructs to Rust, and doing a better job at helping understand the internals."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var n=s(6540);const a={},l=n.createContext(a);function o(e){const t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);