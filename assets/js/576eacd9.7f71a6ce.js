"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[1217],{3588:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"teaclave-trustzone-sdk/docs/writing-rust-tas-using-optee-utee-build","title":"Writing Rust TAs Using optee-utee-build","description":"Currently we provide a optee-utee-build crate to simplify the compilcated","source":"@site/docs/teaclave-trustzone-sdk/docs/writing-rust-tas-using-optee-utee-build.md","sourceDirName":"teaclave-trustzone-sdk/docs","slug":"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md","permalink":"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md","slug":"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md"},"sidebar":"teaclave-trustzone-sdk_sidebar","previous":{"title":"Overview of OP-TEE Rust Examples","permalink":"/trustzone-sdk-docs/overview-of-optee-rust-examples"},"next":{"title":"Building Rust CA as Android ELF","permalink":"/trustzone-sdk-docs/building-rust-ca-as-android-elf.md"}}');var s=i(4848),r=i(8453);const o={permalink:"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md",slug:"/trustzone-sdk-docs/writing-rust-tas-using-optee-utee-build.md"},l="Writing Rust TAs Using optee-utee-build",d={},a=[{value:"Explaination of Minimal Example",id:"explaination-of-minimal-example",level:2},{value:"1. The TaConfig",id:"1-the-taconfig",level:3},{value:"2. The RustEdition",id:"2-the-rustedition",level:3},{value:"What\u2019s the difference?",id:"whats-the-difference",level:4},{value:"1. Builder",id:"1-builder",level:3},{value:"2. Linker",id:"2-linker",level:3},{value:"3. HeaderFileGenerator",id:"3-headerfilegenerator",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"writing-rust-tas-using-optee-utee-build",children:"Writing Rust TAs Using optee-utee-build"})}),"\n",(0,s.jsxs)(n.p,{children:["Currently we provide a ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," crate to simplify the compilcated\nbuilding process of TA, and we recommend everyone use it in future developement."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For legacy app structures migrating to use this crate, refer to ",(0,s.jsx)(n.a,{href:"#migration-guide",children:"Migration\nGuide"})]}),"\n",(0,s.jsxs)(n.li,{children:["If you're new to development, start with ",(0,s.jsx)(n.a,{href:"#minimal-example",children:"Minimal Example"})]}),"\n",(0,s.jsxs)(n.li,{children:["To customize the build process, see ",(0,s.jsx)(n.a,{href:"#customization",children:"Customization"})]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,s.jsxs)(n.p,{children:["Assuming currently we are developing a ",(0,s.jsx)(n.code,{children:"hello_world"})," TA, and we want to build it\nwith ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," crate, we can do it by following steps."]}),"\n",(0,s.jsxs)(n.p,{children:["Firstly, we should add ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," in ",(0,s.jsx)(n.code,{children:"build-dependencies"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cargo add --build optee-utee-build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Secondly, we set a ",(0,s.jsx)(n.code,{children:"ta_config"})," and call ",(0,s.jsx)(n.code,{children:"optee-utee-build::build"})," with it in\nbuild.rs:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use proto;\nuse optee_utee_build::{TaConfig, Error, RustEdition};\n\nfn main() -> Result<(), Error> {\n    let ta_config = TaConfig::new_default_with_cargo_env(proto::UUID)?;\n    optee_utee_build::build(RustEdition::Before2024, ta_config)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It will generate a ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})," file and setup all the required\nconfigurations of the linker of rustc."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, we include the generated ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})," in the source codes,\nnormally we put it in ",(0,s.jsx)(n.code,{children:"src/main.rs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// src/main.rs\ninclude!(concat!(env!("OUT_DIR"), "/user_ta_header.rs"));\n'})}),"\n",(0,s.jsx)(n.p,{children:"After that, everything finished, we can start building the TA now."}),"\n",(0,s.jsxs)(n.p,{children:["For full codes, you can check the ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/tree/main/examples/hello_world-rs/ta",children:(0,s.jsx)(n.code,{children:"hello_world-rs example"})})]}),"\n",(0,s.jsx)(n.h2,{id:"explaination-of-minimal-example",children:"Explaination of Minimal Example"}),"\n",(0,s.jsx)(n.h3,{id:"1-the-taconfig",children:"1. The TaConfig"}),"\n",(0,s.jsx)(n.p,{children:"This is a struct that use for the configuration of the TA we are developing, it\nhas some public fields:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"uuid"}),": the identifier of TA."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_flags"}),": combination of some bitflags.",(0,s.jsx)(n.br,{}),"\nfor available values, you may check ",(0,s.jsx)(n.a,{href:"https://github.com/OP-TEE/optee_os/blob/c2e42a8f03a5bb6b894ef85ae409f54760c1f50e/lib/libutee/include/user_ta_header.h#L13-L53",children:"user_ta_header.h in optee_os"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_data_size"}),": the size in bytes of the TA allocation pool."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_stack_size"}),": the size in bytes of the stack used for TA execution."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_version"}),": a version string of TA, should be in semver format."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_description"}),": the desciption of TA."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"trace_level"}),": the default trace level of TA.",(0,s.jsx)(n.br,{}),"\nfor available values, you may check ",(0,s.jsx)(n.a,{href:"https://github.com/OP-TEE/optee_os/blob/c2e42a8f03a5bb6b894ef85ae409f54760c1f50e/lib/libutils/ext/include/trace_levels.h#L26-L31",children:"trace_levels.h in optee_os"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"trace_ext"}),": an extra prefix string when output trace log."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ta_framework_stack_size"}),": the size in bytes of the stack used for Trusted\nCore Framework.",(0,s.jsx)(n.br,{}),"\ncurrently used for trace framework and invoke command, should not be less\nthan 2048."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ext_properties"}),": the extra custom properties."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We can construct the ",(0,s.jsx)(n.code,{children:"TaConfig"})," by providing all of the public fields manually,\nor use our standard constructor:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"new_default"}),": construct a default TaConfig by providing uuid, ta_version\nand ta_description, with other configurations set to suggested values, you can\nupdate those configurations later."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"new_default_with_cargo_env"}),": it's a constructor wrapped with new_default,\nbut take ",(0,s.jsx)(n.code,{children:"version"})," and ",(0,s.jsx)(n.code,{children:"description"})," from cargo.toml so simply providing a uuid\nas parameter is enough."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-the-rustedition",children:"2. The RustEdition"}),"\n",(0,s.jsxs)(n.p,{children:["The generated ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})," must be different between ",(0,s.jsx)(n.code,{children:"edition of 2024"}),"\nand ",(0,s.jsx)(n.code,{children:"edition before 2024"}),", and currently there is no official stable way to know\nwhat edition we are compiling with, so we provide a argument to set with."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h4,{id:"whats-the-difference",children:"What\u2019s the difference?"}),"\n",(0,s.jsxs)(n.p,{children:["the generated ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})," file include some const variables and global\nfunctions tagged with ",(0,s.jsx)(n.code,{children:"no_mangle"})," and ",(0,s.jsx)(n.code,{children:"link_section"}),", start from rust edition of\n2024, they must be wrapped with unsafe, or rustc will output a compilation error\n(while before edition of 2024 it must not, or rustc will output a syntax error)."]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"customization",children:"Customization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optee-utee-build"})," provide some structs for flexible use."]}),"\n",(0,s.jsx)(n.h3,{id:"1-builder",children:"1. Builder"}),"\n",(0,s.jsxs)(n.p,{children:["Instead of calling the ",(0,s.jsx)(n.code,{children:"build"})," function directly, you can use Builder for\ncustomization."]}),"\n",(0,s.jsx)(n.p,{children:"Usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Rust",children:'use proto;\nuse optee_utee_build::{TaConfig, Builder, Error, RustEdition, LinkType};\n\nfn main() -> Result<(), Error> {\n    let ta_config = TaConfig::new_default_with_cargo_env(proto::UUID)?;\n    Builder::new(RustEdition::Before2024, ta_config)\n      .out_dir("/tmp")\n      .header_file_name("my_generated_user_ta_header.rs")\n      .link_type(LinkType::CC)\n      .build()\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"As you can see from the codes, there are some customizations of the builder:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"out_dir"}),": change directory of output files.",(0,s.jsx)(n.br,{}),"\ndefault to OUT_DIR by cargo."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"header_file_name"}),": change name of output header file.",(0,s.jsx)(n.br,{}),"\ndefault to ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"link_type"}),": set link_type manually.",(0,s.jsx)(n.br,{}),"\nthere are some difference in parameters in\nlinkers between ",(0,s.jsx)(n.code,{children:"CC"})," and ",(0,s.jsx)(n.code,{children:"LD"})," types, for example, ",(0,s.jsx)(n.code,{children:"--sort-section"})," in ",(0,s.jsx)(n.code,{children:"CC"})," types\nof linkers changes to ",(0,s.jsx)(n.code,{children:"-Wl,--sort-section"}),", we will try to detect current linker\nthat cargo using, you can use this function to set it manually if you think our\ndetection mismatch."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-linker",children:"2. Linker"}),"\n",(0,s.jsxs)(n.p,{children:["For developers who prefer to use a hand-written ",(0,s.jsx)(n.code,{children:"user_ta_header.rs"})," and only\nwant ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," to handle the linking process, they can use the\n",(0,s.jsx)(n.code,{children:"Linker"}),", otherwise, try ",(0,s.jsx)(n.code,{children:"Builder"})," instead."]}),"\n",(0,s.jsx)(n.p,{children:"Usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use optee_utee_build::{Linker, Error};\nuse std::env;\n\nfn main() -> Result<(), Error> {\n  let out_dir = env::var("OUT_DIR")?;\n  Linker::auto().link_all(out_dir)?;\n  Ok(())\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When linking manually, developers construct a ",(0,s.jsx)(n.code,{children:"Linker"})," and calling the\n",(0,s.jsx)(n.code,{children:"link_all"})," method by providing the out_dir, and linker will generate some\nrequired files (link script, etc, used by linker) into out_dir and handle all\nthe linking stuff."]}),"\n",(0,s.jsxs)(n.p,{children:["In above codes, we use ",(0,s.jsx)(n.code,{children:"auto"})," to construct the linker, it will detect current\nlinker that cargo using automatically, you can use ",(0,s.jsx)(n.code,{children:"new"})," function to construct\nthe linker manually if you think our detection mismatch."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use optee_utee_build::{Linker, Error, LinkType};\nuse std::env;\n\nfn main() -> Result<(), Error> {\n  let out_dir = env::var("OUT_DIR")?;\n  Linker::new(LinkerType::CC).link_all(out_dir)?;\n  Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-headerfilegenerator",children:"3. HeaderFileGenerator"}),"\n",(0,s.jsxs)(n.p,{children:["For developers who prefer to do the linking themselves and only want\n",(0,s.jsx)(n.code,{children:"optee-utee-build"})," to generate the header file, they can use the\n",(0,s.jsx)(n.code,{children:"HeaderFileGenerator"}),", otherwise, try ",(0,s.jsx)(n.code,{children:"Builder"})," instead."]}),"\n",(0,s.jsx)(n.p,{children:"Usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use optee_utee_build::{HeaderFileGenerator, TaConfig, RustEdition, Error};\n\nfn main() -> Result<(), Error> {\n  const UUID: &str = "26509cec-4a2b-4935-87ab-762d89fbf0b0";\n  let ta_config = TaConfig::new_default(UUID, "0.1.0", "example")?;\n  let codes = HeaderFileGenerator::new(RustEdition::Before2024).generate(&ta_config)?;\n  Ok(std::io::Write("/tmp/user_ta_header.rs", codes.as_bytes())?)\n}\n\n'})}),"\n",(0,s.jsx)(n.h1,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsxs)(n.p,{children:["For developers still using ",(0,s.jsx)(n.code,{children:"const configuration values"})," in ",(0,s.jsx)(n.code,{children:"src/main.rs"})," and\n",(0,s.jsx)(n.code,{children:"custom build scripts"})," in ",(0,s.jsx)(n.code,{children:"build.rs"}),"(described in ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/blob/main/docs/migrating-to-new-building-env.md",children:"[migrating-to-new-building-env]"}),"),\nthey can upgrade to ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," by following step:"]}),"\n",(0,s.jsxs)(n.p,{children:["Firstly, add ",(0,s.jsx)(n.code,{children:"optee-utee-build"})," as ",(0,s.jsx)(n.code,{children:"build-dependencies"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cargo add --build optee-utee-build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Secondly, in ",(0,s.jsx)(n.code,{children:"build.rs"}),", remove codes of ",(0,s.jsx)(n.code,{children:"custom build scripts"}),", and use\n",(0,s.jsx)(n.code,{children:"optee_utee_build::build"})," instead:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ... other imports\nuse optee_utee_build::{TaConfig, Error}\n\nfn main() -> Result<(), Error> {\n  // should customize the ta_config with the same as const configuration values\n  // in your src/main.rs\n  let ta_config = TaConfig::new_default_with_cargo_env(proto::UUID)?\n    .ta_stack_size(10 * 1024); \n  optee_utee_build::build(RustEdition::Before2024, ta_config)?;\n\n  // ... other build scripts\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Thirdly, remove ",(0,s.jsx)(n.code,{children:"const configuration values"})," in ",(0,s.jsx)(n.code,{children:"src/main.rs"}),", keep the line of\n",(0,s.jsx)(n.code,{children:"include user_ta_header.rs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'/// ... other codes in src/main.rs\n\n/* remove const configuration values, move them to TaConfig in src/main.rs\n// TA configurations\nconst TA_FLAGS: u32 = 0;\nconst TA_DATA_SIZE: u32 = 32 * 1024;\nconst TA_STACK_SIZE: u32 = 2 * 1024;\nconst TA_VERSION: &[u8] = b"0.1\\0";\nconst TA_DESCRIPTION: &[u8] = b"This is a hello world example.\\0";\nconst EXT_PROP_VALUE_1: &[u8] = b"Hello World TA\\0";\nconst EXT_PROP_VALUE_2: u32 = 0x0010;\nconst TRACE_LEVEL: i32 = 4;\nconst TRACE_EXT_PREFIX: &[u8] = b"TA\\0";\nconst TA_FRAMEWORK_STACK_SIZE: u32 = 2048;\n*/\n\ninclude!(concat!(env!("OUT_DIR"), "/user_ta_header.rs"));  // keep this line\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Finally, delete the useless ",(0,s.jsx)(n.code,{children:"ta_static.rs"})," and start building now."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);