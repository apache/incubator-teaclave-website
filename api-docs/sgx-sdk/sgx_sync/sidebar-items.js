window.SIDEBAR_ITEMS = {"constant":[["ONCE_INIT","Initialization value for static [`Once`] values."]],"enum":[["FutexClockId",""],["FutexOp",""]],"struct":[["Barrier","A barrier enables multiple threads to synchronize the beginning of some computation."],["BarrierWaitResult","A `BarrierWaitResult` is returned by `Barrier::wait()` when all threads in the `Barrier` have rendezvoused."],["Condvar","An SGX-based condition variable."],["Futex",""],["FutexFlags",""],["LazyLock","A value which is initialized on the first access."],["MovableMutex","An SGX-based mutual exclusion lock."],["MovableRwLock","An SGX-based reader-writer lock."],["Once","A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with [`Once::new()`]."],["OnceLock","A synchronization primitive which can be written to only once."],["OnceState","State yielded to [`Once::call_once_force()`]’s closure parameter. The state can be used to query the poison status of the [`Once`]."],["ReentrantMutex","A re-entrant mutual exclusion"],["ReentrantMutexGuard","An RAII implementation of a “scoped lock” of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked."],["SpinMutex",""],["SpinMutexGuard",""],["SpinRwLock",""],["SpinRwLockReadGuard",""],["SpinRwLockWriteGuard",""],["StaticMutex","An SGX-based mutual exclusion lock, meant for use in static variables."],["StaticMutexGuard",""],["StaticRwLock","An SGX-based reader-writer lock., meant for use in static variables."],["StaticRwLockReadGuard",""],["StaticRwLockWriteGuard",""],["Timespec",""]],"trait":[["RawMutex",""],["RawRwLock",""]]};