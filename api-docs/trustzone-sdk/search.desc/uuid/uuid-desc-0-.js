searchState.loadedDescShard("uuid", 0, "Generate and parse UUIDs.\nA builder struct for creating a UUID.\nA 128-bit (16 byte) buffer containing the ID.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: MAC address.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nSpecial case for <code>nil</code> UUID.\nAs described in the RFC4122 Specification (default).\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nAdapters for various formats for UUIDs\nReturns an array of 16 octets containing the UUID data.\nReturns the four field values of the UUID in big-endian …\nReturns a 128bit value containing the UUID data.\nHands over the internal constructed <code>Uuid</code>.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied big-endian bytes.\nCreates a UUID using the supplied big-endian bytes.\nCreates a <code>Builder</code> from four big-endian field values.\nCreates a UUID from four field values in big-endian order.\nCreates a UUID from four field values in little-endian …\nCreates a <code>Builder</code> using the supplied big-endian bytes.\nCreates a UUID using the supplied big-endian bytes.\nCreates a <code>Builder</code> from a big-endian 128bit value.\nCreates a UUID from a 128bit value in big-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests if the UUID is nil.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nReturns the four field values of the UUID in little-endian …\nGet a <code>Hyphenated</code> formatter.\nGet a borrowed <code>HyphenatedRef</code> formatter.\nGet a <code>Simple</code> formatter.\nGet a borrowed <code>SimpleRef</code> formatter.\nReturns a 128bit little-endian value containing the UUID …\nGet a <code>Urn</code> formatter.\nGet a borrowed <code>UrnRef</code> formatter.\nAn adaptor for formatting an <code>Uuid</code> as a hyphenated string.\nAn adaptor for formatting an <code>Uuid</code> as a hyphenated string.\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nAn adaptor for formatting an <code>Uuid</code> as a simple string.\nAn adaptor for formatting an <code>Uuid</code> as a simple string.\nAn adaptor for formatting an <code>Uuid</code> as a URN string.\nAn adaptor for formatting an <code>Uuid</code> as a URN string.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>HyphenatedRef</code> from a <code>Uuid</code> reference.\nCreates a <code>SimpleRef</code> from a <code>Uuid</code> reference.\nCreates a <code>UrnRef</code> from a <code>Uuid</code> reference.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")